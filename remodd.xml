<?xml version="1.0" encoding="utf-8"?>
<items>
<item><title>Toward a Megamodeling Approaches Overview</title><authors>Ralf Lämmel^1, Vadim Zaytsev^2</authors><organization>1 Universität Koblenz-Landau, 2 Universiteit van Amsterdam</organization><req-tools>Adobe Reader</req-tools><languages>UML, MEGAF, MegaL and other structured, unstructured and semi-structured languages for megamodelling</languages><description><value>This is an attempt to collect technology models (commonly referred to as megamodels or macromodels) used in recent academic peer-reviewed publications for explaining and/or analysing software languages and software technologies.</value><value>This is an attempt to collect technology models (commonly referred to as megamodels or macromodels) used in recent academic peer-reviewed publications for explaining and/or analysing software languages and software technologies.</value></description><artifacts-link></artifacts-link><artifacts-types><value>Metamodel</value><value>Model transformation</value><value>Metamodel</value><value>Model transformation</value></artifacts-types><artifacts-dev-context><value>Research Project</value><value>Research Project</value></artifacts-dev-context><software-domains><value>Model transformation</value><value>Model transformation</value></software-domains><lifecycle-phases><value>Validation/Verification/Analysis</value><value>Validation/Verification/Analysis</value></lifecycle-phases><modelinglanguages-notations><value>MEGAF</value><value>MegaL</value><value>class diagram</value><value>MEGAF</value><value>MegaL</value><value>class diagram</value></modelinglanguages-notations><keyword><value>megamodels</value><value>macromodels</value><value>technology models</value><value>megamodels</value><value>macromodels</value><value>technology models</value></keyword><git-url>None</git-url></item>
<item><title>Integrating modeling and programming languages - The case of Java and fUML (case study models) </title><authors>Patrick Neubauer</authors><organization>Vienna University of Technology</organization><req-tools>- Eclipse Kepler (Modeling Tools distribution)
- fUML Library Support projects (see: https://github.com/patrickneubauer/fuml-library-support)

In case Java library reverse engineering is desired: a reverse engineering tool of choice (e.g., Jar2UML Eclipse plugin).</req-tools><languages>UML 2 and Java 6.</languages><description><value>- UML class models representing the reverse engineered Java libraries</value><value>
- UML activity models representing the modeled activities referencing the reverse engineered Java libraries</value><value>- UML class models representing the reverse engineered Java libraries</value><value>
- UML activity models representing the modeled activities referencing the reverse engineered Java libraries</value></description><artifacts-link><value>https://github.com/patrickneubauer/fuml-library-support</value><value>https://github.com/patrickneubauer/fuml-library-support</value></artifacts-link><artifacts-types><value>Case study</value><value>Model</value><value>Case study</value><value>Model</value></artifacts-types><artifacts-dev-context><value>Research Project</value><value>Workshop/Focus Group</value><value>Research Project</value><value>Workshop/Focus Group</value></artifacts-dev-context><software-domains><value>System Software</value><value>System Software</value></software-domains><lifecycle-phases><value>System</value><value>Runtime/Operational</value><value>Validation/Verification/Analysis</value><value>System</value><value>Runtime/Operational</value><value>Validation/Verification/Analysis</value></lifecycle-phases><modelinglanguages-notations><value>activity diagram</value><value>class diagram</value><value>activity diagram</value><value>class diagram</value></modelinglanguages-notations><keyword><value>fUML</value><value>MDE</value><value>fUML virtual machine</value><value>software library</value><value>model execution</value><value>fUML</value><value>MDE</value><value>fUML virtual machine</value><value>software library</value><value>model execution</value></keyword><git-url>None</git-url></item>
<item><title>Renarrating Metalanguage Integration</title><authors>Vadim Zaytsev</authors><organization>Universiteit van Amsterdam</organization><req-tools>Adobe Reader</req-tools><languages>Ad hoc categorical-style diagram</languages><description><value>An example of use for the "</value><value>" megamodel that we are presenting this year at MoDELS: four technology-specifc renarrations.</value><value>An example of use for the "</value><value>" megamodel that we are presenting this year at MoDELS: four technology-specifc renarrations.</value></description><artifacts-link></artifacts-link><artifacts-types><value>Methodology/Technique/Process</value><value>Model transformation</value><value>Methodology/Technique/Process</value><value>Model transformation</value></artifacts-types><artifacts-dev-context><value>Research Project</value><value>Research Project</value></artifacts-dev-context><software-domains><value>System Software</value><value>System Software</value></software-domains><lifecycle-phases><value>Domain Analysis</value><value>Implementation</value><value>Domain Analysis</value><value>Implementation</value></lifecycle-phases><modelinglanguages-notations><value>Diagram</value><value>Diagram</value></modelinglanguages-notations><keyword><value>parsing</value><value>semiparsing</value><value>syntactic analysis</value><value>lexical analysis</value><value>megamodelling</value><value>parsing</value><value>semiparsing</value><value>syntactic analysis</value><value>lexical analysis</value><value>megamodelling</value></keyword><git-url>None</git-url></item>
<item><title>Demo Artifact</title><authors>Andrew Jacobson</authors><organization>CSU</organization><req-tools>Eclipse, Papyrus</req-tools><languages>UML</languages><description><value>A dummy artifact for the Eclipse plugin demo</value><value>A dummy artifact for the Eclipse plugin demo</value></description><artifacts-link></artifacts-link><artifacts-types><value>Model</value><value>Model</value></artifacts-types><artifacts-dev-context><value>Workshop/Focus Group</value><value>Workshop/Focus Group</value></artifacts-dev-context><software-domains></software-domains><lifecycle-phases></lifecycle-phases><modelinglanguages-notations></modelinglanguages-notations><keyword><value>Papyrus</value><value>Papyrus</value></keyword><git-url>https://remodd.org/git/demo_artifact/git.cgi/demo_artifact.git</git-url></item>
<item><title>OpenStack Model</title><authors>Lukman Rahim</authors><organization>Unviersiti Teknologi PETRONAS</organization><req-tools>StarUML 5.0.2.1570</req-tools><languages>UML</languages><description><value>Class diagram of OpenStack</value><value>Class diagram of OpenStack</value></description><artifacts-link></artifacts-link><artifacts-types><value>Model</value><value>Model</value></artifacts-types><artifacts-dev-context><value>Research Project</value><value>Research Project</value></artifacts-dev-context><software-domains><value>Internet/Web-based/Cloud Software</value><value>Internet/Web-based/Cloud Software</value></software-domains><lifecycle-phases><value>Program Design</value><value>Program Design</value></lifecycle-phases><modelinglanguages-notations><value>class diagram</value><value>class diagram</value></modelinglanguages-notations><keyword></keyword><git-url>None</git-url></item>
<item><title>UML Models Generated and Derived for Evaluating aToucan</title><authors>Tao Yue</authors><organization>Simula Research Laboratory</organization><req-tools>IBM RSA and Word</req-tools><languages>UML</languages><description><value>It contains the models derived by the participants of two controlled experiments conducted to evaluate aToucan. It also contains models generated by the aToucan for a number of case studies including ATM, Elevator. References models are also included in this package.</value><value>It contains the models derived by the participants of two controlled experiments conducted to evaluate aToucan. It also contains models generated by the aToucan for a number of case studies including ATM, Elevator. References models are also included in this package.</value></description><artifacts-link><value>https://www.simula.no/publications/Simula.simula.3150</value><value>https://www.simula.no/publications/Simula.simula.3150</value></artifacts-link><artifacts-types><value>Case study</value><value>Model</value><value>Case study</value><value>Model</value></artifacts-types><artifacts-dev-context><value>Academia</value><value>Academia</value></artifacts-dev-context><software-domains><value>Model transformation</value><value>Model transformation</value></software-domains><lifecycle-phases><value>Domain Analysis</value><value>Requirements</value><value>Domain Analysis</value><value>Requirements</value></lifecycle-phases><modelinglanguages-notations><value>Use Cases</value><value>activity diagram</value><value>class diagram</value><value>sequence diagram</value><value>Use Cases</value><value>activity diagram</value><value>class diagram</value><value>sequence diagram</value></modelinglanguages-notations><keyword><value>Use Case Modeling</value><value>Analysis Model</value><value>UML</value><value>Class diagram</value><value>Sequence Diagram</value><value>Activity Diagram</value><value>Transformation</value><value>Traceability</value><value>automation</value><value>Use Case Modeling</value><value>Analysis Model</value><value>UML</value><value>Class diagram</value><value>Sequence Diagram</value><value>Activity Diagram</value><value>Transformation</value><value>Traceability</value><value>automation</value></keyword><git-url>http://remodd.org/git/uml_models_atoucan/git.cgi/uml_models_atoucan.git</git-url></item>
<item><title>OpenCompare case study</title><authors>Guillaume Bécan^1, Mathieu Acher^1, Benoit Combemale^1, Nicolas Sannier^2 </authors><organization>1 University of Rennes 1, 2 University of Luxembourg</organization><req-tools>Eclipse Modeling Tools (Luna)</req-tools><languages>Ecore</languages><description><value>Metamodels used in the development of OpenCompare project (</value><value>)</value><value>Metamodels used in the development of OpenCompare project (</value><value>)</value></description><artifacts-link></artifacts-link><artifacts-types><value>Case study</value><value>Metamodel</value><value>Case study</value><value>Metamodel</value></artifacts-types><artifacts-dev-context><value>Academia</value><value>Academia</value></artifacts-dev-context><software-domains></software-domains><lifecycle-phases></lifecycle-phases><modelinglanguages-notations><value>Ecore</value><value>Ecore</value></modelinglanguages-notations><keyword><value>Product Comparison Matrices</value><value>Frictional forces</value><value>Metamodeling</value><value>Product Comparison Matrices</value><value>Frictional forces</value><value>Metamodeling</value></keyword><git-url>None</git-url></item>
<item><title>Automated Provisioning of Customized Cloud Service Stacks</title><authors>Ta’id Holmes</authors><organization>Deutsche Telekom AG</organization><req-tools>Eclipse Modeling Framework (EMF)</req-tools><languages>Ecore 2.10.1</languages><description><value>related publications:</value><value>related publications:</value></description><artifacts-link></artifacts-link><artifacts-types><value>Metamodel</value><value>Model Driven Service Engineering MDSE</value><value>Metamodel</value><value>Model Driven Service Engineering MDSE</value></artifacts-types><artifacts-dev-context><value>Industry</value><value>Industry</value></artifacts-dev-context><software-domains><value>Internet/Web-based/Cloud Software</value><value>Internet/Web-based/Cloud Software</value></software-domains><lifecycle-phases><value>Software Development process</value><value>Implementation/Deployment</value><value>Software Development process</value><value>Implementation/Deployment</value></lifecycle-phases><modelinglanguages-notations><value>Ecore</value><value>Ecore</value></modelinglanguages-notations><keyword><value>automation</value><value>cloud</value><value>coordination</value><value>development</value><value>DSL</value><value>IaaS</value><value>MDE</value><value>model-based</value><value>provisioning</value><value>SaaS</value><value>service topology</value><value>automation</value><value>cloud</value><value>coordination</value><value>development</value><value>DSL</value><value>IaaS</value><value>MDE</value><value>model-based</value><value>provisioning</value><value>SaaS</value><value>service topology</value></keyword><git-url>None</git-url></item>
<item><title>ALE Compiler and Benchmarks</title><authors>Manuel Leduc^1, Thomas Degueule^2, Benoit Combemale^1, Tijs van der Storm^2^3, Olivier Barais^1</authors><organization>1 University of Rennes 1, 2 CWI, 3 University of Groningen</organization><req-tools>Eclipse DSL</req-tools><languages>Java, Xtend, Eclipse Modeling Framework, Xtext</languages><description><value>The Revisitor pattern is a language implementation pattern that enables independent extensibility of the syntax and semantics of metamodel-based DSLs, with incremental compilation and without anticipation. It is inspired by the Object Algebra design pattern and adapted to the specificities of metamodeling.</value><value>On top of the Revisitor pattern, we introduce ALE, a high-level language for semantics specification of metamodels that compiles to Revisitors to support separate compilation of language modules.</value><value>ALE is tightly integrated with the Eclipse Modeling Framework (EMF) and relies on the Ecore meta-language for the definition of the abstract syntax of DSLs. Operational semantics is defined with ALE using an open-class-like mechanism. ALE is bundled a set of Eclipse plug-ins.</value><value>The Revisitor pattern is a language implementation pattern that enables independent extensibility of the syntax and semantics of metamodel-based DSLs, with incremental compilation and without anticipation. It is inspired by the Object Algebra design pattern and adapted to the specificities of metamodeling.</value><value>On top of the Revisitor pattern, we introduce ALE, a high-level language for semantics specification of metamodels that compiles to Revisitors to support separate compilation of language modules.</value><value>ALE is tightly integrated with the Eclipse Modeling Framework (EMF) and relies on the Ecore meta-language for the definition of the abstract syntax of DSLs. Operational semantics is defined with ALE using an open-class-like mechanism. ALE is bundled a set of Eclipse plug-ins.</value></description><artifacts-link><value>https://github.com/manuelleduc/ale-compiler</value><value>https://github.com/manuelleduc/ale-compiler-benchmarks</value><value>http://gemoc.org/ale/revisitors/paper.pdf</value><value>http://gemoc.org/ale/revisitors/revisitor-artifacts.pdf</value><value>https://github.com/manuelleduc/ale-compiler</value><value>https://github.com/manuelleduc/ale-compiler-benchmarks</value><value>http://gemoc.org/ale/revisitors/paper.pdf</value><value>http://gemoc.org/ale/revisitors/revisitor-artifacts.pdf</value></artifacts-link><artifacts-types><value>Tool</value><value>Tool</value></artifacts-types><artifacts-dev-context><value>Academia</value><value>Academia</value></artifacts-dev-context><software-domains></software-domains><lifecycle-phases></lifecycle-phases><modelinglanguages-notations><value>Ecore</value><value>Ecore</value></modelinglanguages-notations><keyword></keyword><git-url>None</git-url></item>
<item><title>Class diagram of OpenNebula</title><authors>Lukman Rahim</authors><organization>Unviersiti Teknologi PETRONAS</organization><req-tools>ArgoUML</req-tools><languages>UML</languages><description><value>A class diagram showing the design of OpenNebula</value><value>A class diagram showing the design of OpenNebula</value></description><artifacts-link></artifacts-link><artifacts-types><value>Model</value><value>Model</value></artifacts-types><artifacts-dev-context><value>Research Project</value><value>Research Project</value></artifacts-dev-context><software-domains><value>Internet/Web-based/Cloud Software</value><value>Internet/Web-based/Cloud Software</value></software-domains><lifecycle-phases><value>Program Design</value><value>Program Design</value></lifecycle-phases><modelinglanguages-notations><value>class diagram</value><value>class diagram</value></modelinglanguages-notations><keyword></keyword><git-url>None</git-url></item>
<item><title>uml-profile-store</title><authors>Alexander Bergmayr</authors><organization>Vienna University of Technology</organization><req-tools>Modeling Tool with UML2 support including UML Profiles</req-tools><languages>UML2 </languages><description><value>UML profiles generated from annotation-based Java libraries / frameworks</value><value>UML profiles generated from annotation-based Java libraries / frameworks</value></description><artifacts-link><value>https://code.google.com/a/eclipselabs.org/p/uml-profile-store/</value><value>https://code.google.com/a/eclipselabs.org/p/uml-profile-store/source/browse/#git%2FUMLProfiles</value><value>https://code.google.com/a/eclipselabs.org/p/uml-profile-store/</value><value>https://code.google.com/a/eclipselabs.org/p/uml-profile-store/source/browse/#git%2FUMLProfiles</value></artifacts-link><artifacts-types><value>Profile</value><value>Profile</value></artifacts-types><artifacts-dev-context><value>Research Project</value><value>Research Project</value></artifacts-dev-context><software-domains><value>Enterprise Systems</value><value>Internet/Web-based/Cloud Software</value><value>Enterprise Systems</value><value>Internet/Web-based/Cloud Software</value></software-domains><lifecycle-phases><value>Software Development process</value><value>Migration</value><value>Software Development process</value><value>Migration</value></lifecycle-phases><modelinglanguages-notations><value>class diagram</value><value>profiles</value><value>class diagram</value><value>profiles</value></modelinglanguages-notations><keyword><value>UML Profiles</value><value>Annotation Mechanism</value><value>Java Annotations</value><value>Annotation</value><value>Stereotype</value><value>UML Profiles</value><value>Annotation Mechanism</value><value>Java Annotations</value><value>Annotation</value><value>Stereotype</value></keyword><git-url>None</git-url></item>
<item><title>MODELS2017-BPMN2UML Artifacts</title><authors>Qusai Ramadan^1, Mattia Salnitriy^2, Daniel Strüber^1, Jan Jürjens^1 and Paolo Giorginiy^2</authors><organization>1 University of Koblenz-Landau, 2 University of Trento </organization><req-tools>We recommend using Eclipse Neon, Modeling Tools distribution (https://www.eclipse.org/downloads/packages/eclipse-modeling-tools/neonr), with
installed Henshin(https://www.eclipse.org/henshin/) and CARiSMA (https://rgse.uni-koblenz.de/carisma/) plug-ins. These plug-ins can be installed either using online update sites, or the mirrored update sites provided as part of the artifact. More details about how to install these softwares are provided in the README file.</req-tools><languages>For people who are interested in viewing the SecBPMN2 Models or UMLsec models, we recommended the use of the following tools. However, this is not an obligation, our project still can be executed without having these tools. For viewing the SecBPMN2 models, please install STS-Tool. For viewing the UMLsec models, please install Papyrus on your Eclipse. More details about how to install these software are provided in the README file.</languages><description><value>The Eclipse project package *myexample.zip* has the following contents:</value><value> Additional test input models</value><value>The Eclipse project package *myexample.zip* has the following contents:</value><value> Additional test input models</value></description><artifacts-link><value>https://figshare.com/s/2a741558cb1381db8dd6</value><value>https://figshare.com/s/716f371b16f4c8c0a93d</value><value>https://figshare.com/s/69de2308c85dfc31d9a2</value><value>https://figshare.com/s/b57d42f7ec63c8d2cdec</value><value>https://github.com/grammarware/models17/blob/master/ramadan/README.md</value><value>https://figshare.com/s/b292824ca98f2185a949</value><value>https://figshare.com/s/dc79bf8d4eb451ccca2f</value><value>https://figshare.com/s/a922f57fd14c853e313f</value><value>https://figshare.com/s/051baa54ee849eca8d4e</value><value>https://figshare.com/s/b322d002077d99577949</value><value>https://figshare.com/s/2a741558cb1381db8dd6</value><value>https://figshare.com/s/716f371b16f4c8c0a93d</value><value>https://figshare.com/s/69de2308c85dfc31d9a2</value><value>https://figshare.com/s/b57d42f7ec63c8d2cdec</value><value>https://github.com/grammarware/models17/blob/master/ramadan/README.md</value><value>https://figshare.com/s/b292824ca98f2185a949</value><value>https://figshare.com/s/dc79bf8d4eb451ccca2f</value><value>https://figshare.com/s/a922f57fd14c853e313f</value><value>https://figshare.com/s/051baa54ee849eca8d4e</value><value>https://figshare.com/s/b322d002077d99577949</value></artifacts-link><artifacts-types><value>Case study</value><value>Model transformation</value><value>Case study</value><value>Model transformation</value></artifacts-types><artifacts-dev-context><value>Academia</value><value>Research Project</value><value>Academia</value><value>Research Project</value></artifacts-dev-context><software-domains><value>Enterprise Systems</value><value>Model transformation</value><value>Enterprise Systems</value><value>Model transformation</value></software-domains><lifecycle-phases><value>Software Architecture</value><value>software development phases</value><value>Systems Engineering/Business Process Engineering</value><value>Validation/Verification/Analysis</value><value>Software Architecture</value><value>software development phases</value><value>Systems Engineering/Business Process Engineering</value><value>Validation/Verification/Analysis</value></lifecycle-phases><modelinglanguages-notations><value>BPMN</value><value>Deployment diagram</value><value>class diagram</value><value>BPMN</value><value>Deployment diagram</value><value>class diagram</value></modelinglanguages-notations><keyword><value>Socio-Technical-Systems</value><value>Transformation</value><value>BPMN</value><value>UML</value><value>Security</value><value>Socio-Technical-Systems</value><value>Transformation</value><value>BPMN</value><value>UML</value><value>Security</value></keyword><git-url>None</git-url></item>
<item><title>Modeling Specification for bCMS Product Line using Feature Model, Component Family Model and UML</title><authors>Shuai Wang, Shaukat Ali</authors><organization>Certus Software V&amp;V Center, Simula Research Laboratory</organization><req-tools>Pure::Variants, Rational Software Architect (RSA) </req-tools><languages>Feature model, Component Family Model and UML</languages><description><value>This document presents the whole models for bCMS product line, i.e., UML behavioral model repository, Feature Model for bCMS product line and Component Family Model for bCMS product line. Afterwards, an example is shown for configuring a variant.</value><value>This document presents the whole models for bCMS product line, i.e., UML behavioral model repository, Feature Model for bCMS product line and Component Family Model for bCMS product line. Afterwards, an example is shown for configuring a variant.</value></description><artifacts-link></artifacts-link><artifacts-types><value>Case study</value><value>Methodology/Technique/Process</value><value>Model</value><value>Case study</value><value>Methodology/Technique/Process</value><value>Model</value></artifacts-types><artifacts-dev-context><value>Academia</value><value>Workshop/Focus Group</value><value>Academia</value><value>Workshop/Focus Group</value></artifacts-dev-context><software-domains><value>Software Product Line</value><value>Crisis Management Systems</value><value>Software Product Line</value><value>Crisis Management Systems</value></software-domains><lifecycle-phases><value>Validation/Verification/Analysis</value><value>Validation/Verification/Analysis</value></lifecycle-phases><modelinglanguages-notations><value>UML</value><value>Feature Model</value><value>Component Family Model</value><value>UML</value><value>Feature Model</value><value>Component Family Model</value></modelinglanguages-notations><keyword><value>CMA@MODELS2013</value><value>bCMS product line</value><value>feature model</value><value>component family model</value><value>UML</value><value>CMA@MODELS2013</value><value>bCMS product line</value><value>feature model</value><value>component family model</value><value>UML</value></keyword><git-url>None</git-url></item>
<item><title>Modeling the Architecture and Design of the Crisis Management System Product Line Using SimPL</title><authors>Kunming Nie^1, Tao Yue^2, Shaukat Ali^2</authors><organization>1 Beihang University, 2 Simula Research Laboratory</organization><req-tools>IBM Rational Software Architect</req-tools><languages>UML</languages><description><value>The artifact is an emx file containing a model capturing the system architecture and design, and variabilities of an extended crisis management system product line. The model is specified using the SimPL methodology, which is based on UML class diagram with extended functionality of specifying and organizing variation points.</value><value>The artifact is an emx file containing a model capturing the system architecture and design, and variabilities of an extended crisis management system product line. The model is specified using the SimPL methodology, which is based on UML class diagram with extended functionality of specifying and organizing variation points.</value></description><artifacts-link></artifacts-link><artifacts-types><value>Case study</value><value>Model</value><value>Case study</value><value>Model</value></artifacts-types><artifacts-dev-context><value>Academia</value><value>Research Project</value><value>Academia</value><value>Research Project</value></artifacts-dev-context><software-domains><value>Crisis Management System</value><value>Crisis Management System</value></software-domains><lifecycle-phases><value>System</value><value>System</value></lifecycle-phases><modelinglanguages-notations><value>class diagram</value><value>class diagram</value></modelinglanguages-notations><keyword><value>CMA@MODELS2013</value><value>UML Class Diagram</value><value>Package</value><value>Template</value><value>Profile</value><value>Cyber Physical Systems</value><value>CMA@MODELS2013</value><value>UML Class Diagram</value><value>Package</value><value>Template</value><value>Profile</value><value>Cyber Physical Systems</value></keyword><git-url>None</git-url></item>
<item><title>bCMS - Requirements Definition</title><authors>A. Capozucca^1, B.H.C. Cheng^2, G. Georg^3, N. Guelfi^1, P. Istoan^1, G. Mussbacher^4</authors><organization>1 Univ. of Luxembourg, 2 Michigan State Univ., 3 Colorado State Univ., 4 Carleton Univ.</organization><req-tools>None</req-tools><languages>None</languages><description><value>Defines the requirements of a Software Product Line called bCMS-SPL including a reference variant.</value><value>Defines the requirements of a Software Product Line called bCMS-SPL including a reference variant.</value></description><artifacts-link></artifacts-link><artifacts-types><value>Requirements Document</value><value>Requirements Document</value></artifacts-types><artifacts-dev-context><value>Challenge Problem/Competition</value><value>Workshop/Focus Group</value><value>Challenge Problem/Competition</value><value>Workshop/Focus Group</value></artifacts-dev-context><software-domains><value>Reactive System</value><value>Software Product Line</value><value>Reactive System</value><value>Software Product Line</value></software-domains><lifecycle-phases><value>Requirements</value><value>Requirements</value></lifecycle-phases><modelinglanguages-notations></modelinglanguages-notations><keyword><value>Software product line</value><value>Comparing Modeling Approaches</value><value>CMA</value><value>Workshop</value><value>Requirements</value><value>Software product line</value><value>Comparing Modeling Approaches</value><value>CMA</value><value>Workshop</value><value>Requirements</value></keyword><git-url>None</git-url></item>
<item><title>Bridging Engineering and Formal Modeling: WebGME and Formula Integration</title><authors>Tamas Kecskes, Qishen Zhang, Janos Sztipanovits</authors><organization>Vanderbilt University</organization><req-tools>See the readme of the repository for necessary tools and installation information.</req-tools><languages>WebGME
Formula
</languages><description><value>The linked repository houses the WebGME Formula integration project.</value><value>
After installation the user can try out this web-based tool on her/his own machine or even remotely if the installation was done in the cloud.</value><value>The linked repository houses the WebGME Formula integration project.</value><value>
After installation the user can try out this web-based tool on her/his own machine or even remotely if the installation was done in the cloud.</value></description><artifacts-link><value>https://github.com/webgme/formula/tree/gemoc17</value><value>https://github.com/webgme/formula/tree/gemoc17</value></artifacts-link><artifacts-types><value>Tool</value><value>Tool</value></artifacts-types><artifacts-dev-context><value>Research Project</value><value>Research Project</value></artifacts-dev-context><software-domains><value>Internet/Web-based/Cloud Software</value><value>Internet/Web-based/Cloud Software</value></software-domains><lifecycle-phases></lifecycle-phases><modelinglanguages-notations></modelinglanguages-notations><keyword><value>WebGME</value><value>Formula</value><value>DSML</value><value>Model transformation</value><value>Constraint Programming</value><value>WebGME</value><value>Formula</value><value>DSML</value><value>Model transformation</value><value>Constraint Programming</value></keyword><git-url>None</git-url></item>
<item><title>UML 2.2 Packages in Ecore format + OCL well-formedness rules</title><authors>Juan Cadavid</authors><organization>INRIA</organization><req-tools>Eclipse EMF, Eclipse OCL</req-tools><languages>Java</languages><description><value>UML 2.2 packages in Ecore format with OCL well-formedness rules, parsed in the OCL abstract syntax tree of Eclipse OCL. Each one of the 13 packages contains an .ecore and a corresponding .oclxmi file. The original .ecore file was taken from the Eclipse UML2 project.</value><value>UML 2.2 packages in Ecore format with OCL well-formedness rules, parsed in the OCL abstract syntax tree of Eclipse OCL. Each one of the 13 packages contains an .ecore and a corresponding .oclxmi file. The original .ecore file was taken from the Eclipse UML2 project.</value></description><artifacts-link></artifacts-link><artifacts-types><value>Metamodel</value><value>Metamodel</value></artifacts-types><artifacts-dev-context><value>Research Project</value><value>Research Project</value></artifacts-dev-context><software-domains><value>System Software</value><value>System Software</value></software-domains><lifecycle-phases></lifecycle-phases><modelinglanguages-notations></modelinglanguages-notations><keyword></keyword><git-url>None</git-url></item>
<item><title>Comparison Criteria for bCMS Models of CMA Workshop</title><authors>A. Moreira^1, B.H.C. Cheng^2, G. Georg^3, G. Mussbacher^4, R. France^3</authors><organization>1 Univ. Nova de Lisboa, 2 Michigan State Univ., 3 Colorado State Univ., 4 Carleton Univ.</organization><req-tools>None</req-tools><languages>None</languages><description><value>Comparison criteria document for bCMS models of CMA workshop</value><value>Comparison criteria document for bCMS models of CMA workshop</value></description><artifacts-link></artifacts-link><artifacts-types><value>Lecture/Tutorial/Training or Course material</value><value>Lecture/Tutorial/Training or Course material</value></artifacts-types><artifacts-dev-context><value>Challenge Problem/Competition</value><value>Workshop/Focus Group</value><value>Challenge Problem/Competition</value><value>Workshop/Focus Group</value></artifacts-dev-context><software-domains></software-domains><lifecycle-phases></lifecycle-phases><modelinglanguages-notations></modelinglanguages-notations><keyword><value>bCMS</value><value>Comparing Modeling Approaches</value><value>CMA</value><value>Workshop</value><value>Criteria Document</value><value>Models</value><value>bCMS</value><value>Comparing Modeling Approaches</value><value>CMA</value><value>Workshop</value><value>Criteria Document</value><value>Models</value></keyword><git-url>None</git-url></item>
<item><title>MOF 2.0 Metamodels in Ecore format + OCL well-formedness rules</title><authors>Juan Cadavid</authors><organization>INRIA</organization><req-tools>None</req-tools><languages>None</languages><description></description><artifacts-link></artifacts-link><artifacts-types><value>Metamodel</value><value>Metamodel</value></artifacts-types><artifacts-dev-context><value>Research Project</value><value>Research Project</value></artifacts-dev-context><software-domains></software-domains><lifecycle-phases></lifecycle-phases><modelinglanguages-notations></modelinglanguages-notations><keyword></keyword><git-url>None</git-url></item>
<item><title>How Could Ancient Romans Know About UML Statecharts?</title><authors>Martin Gogolla</authors><organization>University of Bremen</organization><req-tools>USE 3.1.0, JFLAP, yEd</req-tools><languages>UML, OCL</languages><description><value>How Could Ancient Romans Know About UML Statecharts?</value><value>How Could Ancient Romans Know About UML Statecharts?</value></description><artifacts-link></artifacts-link><artifacts-types><value>Case study</value><value>Case study</value></artifacts-types><artifacts-dev-context><value>Academia</value><value>Academia</value></artifacts-dev-context><software-domains></software-domains><lifecycle-phases></lifecycle-phases><modelinglanguages-notations><value>class diagram</value><value>statemachine diagram</value><value>class diagram</value><value>statemachine diagram</value></modelinglanguages-notations><keyword></keyword><git-url>None</git-url></item>
<item><title>OCL specification metamodels in Ecore format + well-formedness rules specified in OCL</title><authors>Juan Cadavid</authors><organization>INRIA</organization><req-tools>None</req-tools><languages>None</languages><description></description><artifacts-link></artifacts-link><artifacts-types><value>Metamodel</value><value>Metamodel</value></artifacts-types><artifacts-dev-context><value>Research Project</value><value>Research Project</value></artifacts-dev-context><software-domains></software-domains><lifecycle-phases></lifecycle-phases><modelinglanguages-notations></modelinglanguages-notations><keyword></keyword><git-url>None</git-url></item>
<item><title>CORBA Component Model Specification Metamodels in Ecore format + OCL well-formedness rules</title><authors>Juan Cadavid</authors><organization>INRIA</organization><req-tools>None</req-tools><languages>None</languages><description></description><artifacts-link></artifacts-link><artifacts-types><value>Metamodel</value><value>Metamodel</value></artifacts-types><artifacts-dev-context><value>Research Project</value><value>Research Project</value></artifacts-dev-context><software-domains></software-domains><lifecycle-phases></lifecycle-phases><modelinglanguages-notations></modelinglanguages-notations><keyword></keyword><git-url>None</git-url></item>
<item><title>OMG Common Warehouse Metamodel in Ecore format + OCL well-formedness rules</title><authors>Juan Cadavid</authors><organization>INRIA</organization><req-tools>None</req-tools><languages>None</languages><description></description><artifacts-link></artifacts-link><artifacts-types><value>Metamodel</value><value>Metamodel</value></artifacts-types><artifacts-dev-context><value>Research Project</value><value>Research Project</value></artifacts-dev-context><software-domains></software-domains><lifecycle-phases></lifecycle-phases><modelinglanguages-notations></modelinglanguages-notations><keyword></keyword><git-url>None</git-url></item>
<item><title>OMG Diagram Definition metamodels + OCL well-formedness rules</title><authors>Juan Cadavid</authors><organization>INRIA</organization><req-tools>None</req-tools><languages>None</languages><description></description><artifacts-link></artifacts-link><artifacts-types><value>Metamodel</value><value>Metamodel</value></artifacts-types><artifacts-dev-context><value>Research Project</value><value>Research Project</value></artifacts-dev-context><software-domains></software-domains><lifecycle-phases></lifecycle-phases><modelinglanguages-notations></modelinglanguages-notations><keyword></keyword><git-url>None</git-url></item>
<item><title>B Language Metamodel in Ecore format + OCL well-formedness rules</title><authors>Juan Cadavid</authors><organization>INRIA</organization><req-tools>None</req-tools><languages>None</languages><description><value>Metamodel created at IMAG. Special thanks to Akram Idani.</value><value>Metamodel created at IMAG. Special thanks to Akram Idani.</value></description><artifacts-link></artifacts-link><artifacts-types><value>Metamodel</value><value>Metamodel</value></artifacts-types><artifacts-dev-context><value>Research Project</value><value>Research Project</value></artifacts-dev-context><software-domains></software-domains><lifecycle-phases></lifecycle-phases><modelinglanguages-notations></modelinglanguages-notations><keyword></keyword><git-url>None</git-url></item>
<item><title>SAD3 Metamodel + OCL Well-formedness rules</title><authors>Juan Cadavid</authors><organization>INRIA</organization><req-tools>None</req-tools><languages>None</languages><description><value>Metamodel for the SAD3 architecture component model. Special thanks to Bastien Coatanéa-Gouachet from ENSTA Bretagne.</value><value>Metamodel for the SAD3 architecture component model. Special thanks to Bastien Coatanéa-Gouachet from ENSTA Bretagne.</value></description><artifacts-link></artifacts-link><artifacts-types><value>Metamodel</value><value>Metamodel</value></artifacts-types><artifacts-dev-context><value>Research Project</value><value>Research Project</value></artifacts-dev-context><software-domains></software-domains><lifecycle-phases></lifecycle-phases><modelinglanguages-notations></modelinglanguages-notations><keyword></keyword><git-url>None</git-url></item>
<item><title>CPFSTool Metamodel in Ecore format + OCL well-formedness rules</title><authors>Juan Cadavid</authors><organization>INRIA</organization><req-tools>None</req-tools><languages>None</languages><description></description><artifacts-link></artifacts-link><artifacts-types><value>Metamodel</value><value>Metamodel</value></artifacts-types><artifacts-dev-context><value>Research Project</value><value>Research Project</value></artifacts-dev-context><software-domains></software-domains><lifecycle-phases></lifecycle-phases><modelinglanguages-notations></modelinglanguages-notations><keyword></keyword><git-url>None</git-url></item>
<item><title>Declarative Workflow Metamodel in Ecore format + OCL Well-formedness rules</title><authors>Juan Cadavid</authors><organization>INRIA</organization><req-tools>None</req-tools><languages>None</languages><description></description><artifacts-link></artifacts-link><artifacts-types><value>Metamodel</value><value>Metamodel</value></artifacts-types><artifacts-dev-context><value>Research Project</value><value>Research Project</value></artifacts-dev-context><software-domains></software-domains><lifecycle-phases></lifecycle-phases><modelinglanguages-notations></modelinglanguages-notations><keyword></keyword><git-url>None</git-url></item>
<item><title>ER 2 RE Metamodel in Ecore format + OCL well-formedness rules</title><authors>Juan Cadavid</authors><organization>INRIA</organization><req-tools>None</req-tools><languages>None</languages><description><value>ER2RE is a metamodel describing a model transformation from an entity-relationship schema to a relational model.</value><value>ER2RE is a metamodel describing a model transformation from an entity-relationship schema to a relational model.</value></description><artifacts-link></artifacts-link><artifacts-types><value>Metamodel</value><value>Metamodel</value></artifacts-types><artifacts-dev-context><value>Research Project</value><value>Research Project</value></artifacts-dev-context><software-domains></software-domains><lifecycle-phases></lifecycle-phases><modelinglanguages-notations></modelinglanguages-notations><keyword></keyword><git-url>None</git-url></item>
<item><title>RBAC metamodel in Ecore format + OCL Well-formedness rules</title><authors>Juan Cadavid</authors><organization>INRIA</organization><req-tools>None</req-tools><languages>None</languages><description></description><artifacts-link></artifacts-link><artifacts-types><value>Metamodel</value><value>Metamodel</value></artifacts-types><artifacts-dev-context><value>Research Project</value><value>Research Project</value></artifacts-dev-context><software-domains></software-domains><lifecycle-phases></lifecycle-phases><modelinglanguages-notations></modelinglanguages-notations><keyword></keyword><git-url>None</git-url></item>
<item><title>HRC (Heterogeneous Rich Components) Metamodel in Ecore format + OCL Well-formedness rules</title><authors>Juan Cadavid</authors><organization>INRIA</organization><req-tools>None</req-tools><languages>None</languages><description></description><artifacts-link></artifacts-link><artifacts-types><value>Metamodel</value><value>Metamodel</value></artifacts-types><artifacts-dev-context><value>Research Project</value><value>Research Project</value></artifacts-dev-context><software-domains></software-domains><lifecycle-phases></lifecycle-phases><modelinglanguages-notations></modelinglanguages-notations><keyword></keyword><git-url>None</git-url></item>
<item><title>SAM Metamodel in Ecore format + OCL well-formedness rules</title><authors>Juan Cadavid</authors><organization>INRIA</organization><req-tools>None</req-tools><languages>None</languages><description></description><artifacts-link></artifacts-link><artifacts-types><value>Metamodel</value><value>Metamodel</value></artifacts-types><artifacts-dev-context><value>Research Project</value><value>Research Project</value></artifacts-dev-context><software-domains></software-domains><lifecycle-phases></lifecycle-phases><modelinglanguages-notations></modelinglanguages-notations><keyword></keyword><git-url>None</git-url></item>
<item><title>UML-RT to kiltera model transformation and examples</title><authors>Ernesto Posse, Juergen Dingel, Eyrak Paen</authors><organization>Queen's University</organization><req-tools>IBM's Rational Software Architect Real-Time Edition (RSA-RTE) v. 8.0.4
Eclipse 3.6</req-tools><languages>For the models:
- UML-RT (RSA-RTE)
For the generated code:
- kiltera 1.0b12
For the transformation:
- RSA mapping transformation tool
- Java™ Emitter Templates (JET) 2
</languages><description><value>UML-RT is a UML profile for real-time and embedded systems, supported by IBM's Rational Software Architect - Real-Time Edition. kiltera is a language for concurrent, mobile and real-time systems based on the pi-calculus. This archive contains a transformation from UML-RT models into kiltera models for analysis and simulation.</value><value>The archive contains:</value><value>
- A model transformation from UML-RT models to kiltera</value><value>
- Some sample UML-RT models, generated kiltera code and intermediate representation</value><value>
- The meta-models for the intermediate representation (a subset of UML-RT) and kiltera models</value><value>UML-RT is a UML profile for real-time and embedded systems, supported by IBM's Rational Software Architect - Real-Time Edition. kiltera is a language for concurrent, mobile and real-time systems based on the pi-calculus. This archive contains a transformation from UML-RT models into kiltera models for analysis and simulation.</value><value>The archive contains:</value><value>
- A model transformation from UML-RT models to kiltera</value><value>
- Some sample UML-RT models, generated kiltera code and intermediate representation</value><value>
- The meta-models for the intermediate representation (a subset of UML-RT) and kiltera models</value></description><artifacts-link></artifacts-link><artifacts-types><value>Metamodel</value><value>Model</value><value>Model transformation</value><value>Metamodel</value><value>Model</value><value>Model transformation</value></artifacts-types><artifacts-dev-context><value>Academia</value><value>Research Project</value><value>Academia</value><value>Research Project</value></artifacts-dev-context><software-domains><value>Embedded Software</value><value>Model transformation</value><value>Reactive System</value><value>Real-time embedded systems</value><value>Embedded Software</value><value>Model transformation</value><value>Reactive System</value><value>Real-time embedded systems</value></software-domains><lifecycle-phases><value>Validation/Verification/Analysis</value><value>Software Architecture</value><value>Validation/Verification/Analysis</value><value>Software Architecture</value></lifecycle-phases><modelinglanguages-notations><value>statemachine diagram</value><value>collaborations</value><value>pi-calculus</value><value>kiltera</value><value>UML-RT</value><value>statemachine diagram</value><value>collaborations</value><value>pi-calculus</value><value>kiltera</value><value>UML-RT</value></modelinglanguages-notations><keyword><value>Model transformation</value><value>Modelling languages</value><value>Real-time Embedded Systems</value><value>Formal Semantics</value><value>Formal specification</value><value>Model transformation</value><value>Modelling languages</value><value>Real-time Embedded Systems</value><value>Formal Semantics</value><value>Formal specification</value></keyword><git-url>None</git-url></item>
<item><title>Aspect-Oriented Modeling for Performance Evaluation with UML+MARTE, LQN, and CSM</title><authors>Mohammad Alhaj, Dorina Petriu</authors><organization>Carleton University</organization><req-tools>None</req-tools><languages>None</languages><description><value>The paper proposes a multi-paradigm modeling approach which aims to derive performance models from software models of enterprise SOA systems, in order to evaluate their run-time performance from the early development phases. This helps to choose between different architecture, design, and configuration alternatives in order to meet the performance requirements. The source models of the proposed transformation are the platform independent model of the service oriented system, the deployment diagram and the platform aspect models. The Performance completion feature model describes the variability in the service platform that may affect the system’s performance. It provides the choice to select between multiple platform alternatives based on the business requirements. Aspect-oriented modeling techniques are used to produce a platform-dependent model by weaving aspect models of platform operations into the platform-independent model. The platform-dependent model thus obtained represents the source models for the transformation into a performance model. The UML profile MARTE is used to annotate models with performance information.</value><value>The paper proposes a multi-paradigm modeling approach which aims to derive performance models from software models of enterprise SOA systems, in order to evaluate their run-time performance from the early development phases. This helps to choose between different architecture, design, and configuration alternatives in order to meet the performance requirements. The source models of the proposed transformation are the platform independent model of the service oriented system, the deployment diagram and the platform aspect models. The Performance completion feature model describes the variability in the service platform that may affect the system’s performance. It provides the choice to select between multiple platform alternatives based on the business requirements. Aspect-oriented modeling techniques are used to produce a platform-dependent model by weaving aspect models of platform operations into the platform-independent model. The platform-dependent model thus obtained represents the source models for the transformation into a performance model. The UML profile MARTE is used to annotate models with performance information.</value></description><artifacts-link></artifacts-link><artifacts-types><value>Methodology/Technique/Process</value><value>Model transformation</value><value>Tool</value><value>Methodology/Technique/Process</value><value>Model transformation</value><value>Tool</value></artifacts-types><artifacts-dev-context><value>Workshop/Focus Group</value><value>Workshop/Focus Group</value></artifacts-dev-context><software-domains><value>Model transformation</value><value>SOA systems</value><value>Model transformation</value><value>SOA systems</value></software-domains><lifecycle-phases><value>Software Architecture</value><value>software development phases</value><value>Software Architecture</value><value>software development phases</value></lifecycle-phases><modelinglanguages-notations><value>class diagram</value><value>activity diagram</value><value>sequence diagram</value><value>Deployment diagram</value><value>Core Scenario Model</value><value>Layered Queueing Network</value><value>MARTE</value><value>SoaML</value><value>class diagram</value><value>activity diagram</value><value>sequence diagram</value><value>Deployment diagram</value><value>Core Scenario Model</value><value>Layered Queueing Network</value><value>MARTE</value><value>SoaML</value></modelinglanguages-notations><keyword><value>CMA@MODELS2012</value><value>CMA@MODELS2012</value></keyword><git-url>None</git-url></item>
<item><title>CMA12 - CMS Domain- i* - Group 6</title><authors>Jennifer Horkoff</authors><organization>University of Trento</organization><req-tools>OpenOME</req-tools><languages>i*</languages><description><value>Final submission to CMA'12, Modeling of CMS Domain in i*</value><value>Final submission to CMA'12, Modeling of CMS Domain in i*</value></description><artifacts-link></artifacts-link><artifacts-types><value>Model</value><value>Model</value></artifacts-types><artifacts-dev-context><value>Academia</value><value>Challenge Problem/Competition</value><value>Academia</value><value>Challenge Problem/Competition</value></artifacts-dev-context><software-domains></software-domains><lifecycle-phases><value>Requirements</value><value>Domain Analysis</value><value>Requirements</value><value>Domain Analysis</value></lifecycle-phases><modelinglanguages-notations><value>i*</value><value>i*</value></modelinglanguages-notations><keyword><value>CMA@MODELS2012</value><value>CMA@MODELS2012</value></keyword><git-url>None</git-url></item>
<item><title>Modeling with Adapt Cases</title><authors>Markus Luckey</authors><organization>University of Paderborn</organization><req-tools>None</req-tools><languages>UML, Adapt Cases</languages><description><value>The document contains the bCMS specification highlighting the concern of self-adaptivity using the Adapt Case Modeling Language.</value><value>The document contains the bCMS specification highlighting the concern of self-adaptivity using the Adapt Case Modeling Language.</value></description><artifacts-link></artifacts-link><artifacts-types><value>Model</value><value>Model</value></artifacts-types><artifacts-dev-context><value>Academia</value><value>Research Project</value><value>Academia</value><value>Research Project</value></artifacts-dev-context><software-domains></software-domains><lifecycle-phases></lifecycle-phases><modelinglanguages-notations></modelinglanguages-notations><keyword><value>CMA@MODELS2012</value><value>adaptation</value><value>adapt cases</value><value>CMA@MODELS2012</value><value>adaptation</value><value>adapt cases</value></keyword><git-url>None</git-url></item>
<item><title>bCMS in LEAP</title><authors>Tony Clark</authors><organization>Middlesex University</organization><req-tools>None</req-tools><languages>LEAP</languages><description><value>This report provides an overview describing how the bCMS case study is implemented in LEAP.</value><value>This report provides an overview describing how the bCMS case study is implemented in LEAP.</value></description><artifacts-link></artifacts-link><artifacts-types><value>Model</value><value>Model</value></artifacts-types><artifacts-dev-context><value>Academia</value><value>Academia</value></artifacts-dev-context><software-domains><value>Enterprise Systems</value><value>Enterprise Systems</value></software-domains><lifecycle-phases><value>Requirements</value><value>Runtime/Operational</value><value>Software Architecture</value><value>Requirements</value><value>Runtime/Operational</value><value>Software Architecture</value></lifecycle-phases><modelinglanguages-notations><value>LEAP</value><value>LEAP</value></modelinglanguages-notations><keyword><value>CMA@MODELS2012</value><value>CMA@MODELS2012</value></keyword><git-url>None</git-url></item>
<item><title>The VCL Model of the Barbados Crisis Management System</title><authors>Nuno Amálio</authors><organization>University of Luxembourg</organization><req-tools>The 'Visual Contract Builder' (http://vcl.gforge.uni.lu/)</req-tools><languages>VCL</languages><description><value>This document presents the VCL model of the barbados Crisis Management System. It is a submission for the Comparing Modelling Approaches workshop an event of the Models 2012 conference.</value><value>This document presents the VCL model of the barbados Crisis Management System. It is a submission for the Comparing Modelling Approaches workshop an event of the Models 2012 conference.</value></description><artifacts-link></artifacts-link><artifacts-types><value>Model</value><value>Model</value></artifacts-types><artifacts-dev-context><value>Academia</value><value>Challenge Problem/Competition</value><value>Workshop/Focus Group</value><value>Academia</value><value>Challenge Problem/Competition</value><value>Workshop/Focus Group</value></artifacts-dev-context><software-domains><value>System Software</value><value>System Software</value></software-domains><lifecycle-phases><value>Design</value><value>Domain Analysis</value><value>Design</value><value>Domain Analysis</value></lifecycle-phases><modelinglanguages-notations><value>Visual Contract Language (VCL)</value><value>Visual Contract Language (VCL)</value></modelinglanguages-notations><keyword><value>CMA@MODELS2012</value><value>CMA@MODELS2012</value></keyword><git-url>None</git-url></item>
<item><title>Intentional Requirements Engineering</title><authors>Antonio de Padua A Oliveira^1, Julio Leite^2, Luiz Marcio Cysneiros^3, Vera Werneck^1</authors><organization>1 Uerj - Rio de Janeiro State University, 2 PUC-Rio, 3 York University - YorkU, Toronto</organization><req-tools>C&amp;L tool - http://pes.inf.puc-rio.br/cel/
The OpenOME - https://se.cs.toronto.edu/trac/ome</req-tools><languages>Language Extended Lexicon (LEL),
NFR Framework,
i* Framework.</languages><description><value>The Intentional Requirements Engineering method is presented as an extension of the i* Framework. The method provides the requirements engineering team a set of useful procedures and tools to guide the construction of i-Star models.</value><value>The Intentional Requirements Engineering method is presented as an extension of the i* Framework. The method provides the requirements engineering team a set of useful procedures and tools to guide the construction of i-Star models.</value></description><artifacts-link></artifacts-link><artifacts-types><value>Methodology/Technique/Process</value><value>Methodology/Technique/Process</value></artifacts-types><artifacts-dev-context><value>Research Project</value><value>Research Project</value></artifacts-dev-context><software-domains><value>Business/Information Systems</value><value>Business/Information Systems</value></software-domains><lifecycle-phases><value>Requirements</value><value>Requirements</value></lifecycle-phases><modelinglanguages-notations><value>i*</value><value>i*</value></modelinglanguages-notations><keyword><value>undefined</value><value>undefined</value></keyword><git-url>None</git-url></item>
<item><title>Models for bCMS using AspectSM</title><authors>Shaukat Ali</authors><organization>Simula Research Laboratory</organization><req-tools>None</req-tools><languages>UML, AspectSM UML Profile, MARTE UML Profile</languages><description></description><artifacts-link></artifacts-link><artifacts-types><value>Model</value><value>Model</value></artifacts-types><artifacts-dev-context><value>Academia</value><value>Academia</value></artifacts-dev-context><software-domains></software-domains><lifecycle-phases><value>Validation/Verification/Analysis</value><value>Validation/Verification/Analysis</value></lifecycle-phases><modelinglanguages-notations><value>statemachine diagram</value><value>statemachine diagram</value></modelinglanguages-notations><keyword></keyword><git-url>None</git-url></item>
<item><title>Concern-Driven Development with AoURN and RAM</title><authors>Omar Alam^1, Matthias Schöttle^1, Gunter Mussbacher^2, Jörg Kienzle^1</authors><organization>1) McGill University 2) Carleton University</organization><req-tools>None</req-tools><languages>Aspect-oriented User Requirements Notation (AoURN), Reusable Aspect Models (RAM)</languages><description><value>The submitted models apply the the Concern-Oriented Reuse (CORE) approach to the bCMS case study. CORE is a concern-oriented, model-driven software development approach for reactive systems that covers the early requirements, late requirements, high-level and low-level design phases of software development. It is based on two aspect-oriented modelling notations: the Aspect-Oriented User Requirements Notation (AoURN) and Reusable Aspect Models (RAM).</value><value>The submitted models apply the the Concern-Oriented Reuse (CORE) approach to the bCMS case study. CORE is a concern-oriented, model-driven software development approach for reactive systems that covers the early requirements, late requirements, high-level and low-level design phases of software development. It is based on two aspect-oriented modelling notations: the Aspect-Oriented User Requirements Notation (AoURN) and Reusable Aspect Models (RAM).</value></description><artifacts-link></artifacts-link><artifacts-types><value>Model</value><value>Model</value></artifacts-types><artifacts-dev-context><value>Academia</value><value>Challenge Problem/Competition</value><value>Workshop/Focus Group</value><value>Academia</value><value>Challenge Problem/Competition</value><value>Workshop/Focus Group</value></artifacts-dev-context><software-domains><value>Reactive System</value><value>Reactive System</value></software-domains><lifecycle-phases><value>Requirements</value><value>Software Architecture</value><value>Requirements</value><value>Software Architecture</value></lifecycle-phases><modelinglanguages-notations><value>class diagram</value><value>sequence diagram</value><value>User Requirements Notation</value><value>Reusable Aspect Models (RAM)</value><value>Aspect-oriented User Requirements Notation</value><value>class diagram</value><value>sequence diagram</value><value>User Requirements Notation</value><value>Reusable Aspect Models (RAM)</value><value>Aspect-oriented User Requirements Notation</value></modelinglanguages-notations><keyword><value>CMA@MODELS2012</value><value>CMA@MODELS2012</value></keyword><git-url>None</git-url></item>
<item><title>Umple submission for Comparing Modeling Artifacts workship at Models 2012</title><authors>Timothy Lethbridge</authors><organization>University of Ottawa</organization><req-tools>None</req-tools><languages>Umple</languages><description><value>This is the workshop version of the paper, in which Umple was applied to the BCms example.</value><value>This is the workshop version of the paper, in which Umple was applied to the BCms example.</value></description><artifacts-link><value>http://try.umple.org/ump/BcmsCore.ump</value><value>http://try.umple.org/ump/RoutesAndLocations.ump</value><value>http://try.umple.org/ump/BcmsBaseConfiguration.ump</value><value>http://try.umple.org/ump/CoordinationStateMachine.ump</value><value>http://try.umple.org/ump/bCMS.vml</value><value>http://try.umple.org/ump/BcmsMultipleCrisis-Multiple-Coordinator-Configuration.ump</value><value>http://try.umple.org/ump/BcmsCore.ump</value><value>http://try.umple.org/ump/RoutesAndLocations.ump</value><value>http://try.umple.org/ump/BcmsBaseConfiguration.ump</value><value>http://try.umple.org/ump/CoordinationStateMachine.ump</value><value>http://try.umple.org/ump/bCMS.vml</value><value>http://try.umple.org/ump/BcmsMultipleCrisis-Multiple-Coordinator-Configuration.ump</value></artifacts-link><artifacts-types><value>Model</value><value>Model</value></artifacts-types><artifacts-dev-context><value>Challenge Problem/Competition</value><value>Challenge Problem/Competition</value></artifacts-dev-context><software-domains></software-domains><lifecycle-phases><value>Software Architecture</value><value>Software Architecture</value></lifecycle-phases><modelinglanguages-notations><value>Umple</value><value>Umple</value></modelinglanguages-notations><keyword><value>bCMS</value><value>Umple</value><value>CMA workshop</value><value>bCMS</value><value>Umple</value><value>CMA workshop</value></keyword><git-url>None</git-url></item>
<item><title>Updated Activity Theory bCMS Model Description for CMA-2012</title><authors>Geri Georg</authors><organization>Colorado State University</organization><req-tools>None</req-tools><languages>None</languages><description><value>Models describing the use of Activity Theory in modeling the high level requirements of the bCMS system. Includes description of transformation (using heuristics) to URN models. Used in the CMA workshop at MODELS 2012. Also includes initial metamodel of a proposed DSL.</value><value>Models describing the use of Activity Theory in modeling the high level requirements of the bCMS system. Includes description of transformation (using heuristics) to URN models. Used in the CMA workshop at MODELS 2012. Also includes initial metamodel of a proposed DSL.</value></description><artifacts-link></artifacts-link><artifacts-types><value>Model</value><value>Model</value></artifacts-types><artifacts-dev-context><value>Workshop/Focus Group</value><value>Workshop/Focus Group</value></artifacts-dev-context><software-domains><value>Cyberphysical Systems</value><value>Cyberphysical Systems</value></software-domains><lifecycle-phases><value>Requirements</value><value>Requirements</value></lifecycle-phases><modelinglanguages-notations></modelinglanguages-notations><keyword><value>User Requirements Notation</value><value>bCMS</value><value>Activity Theory</value><value>Early Requirements</value><value>User Requirements Notation</value><value>bCMS</value><value>Activity Theory</value><value>Early Requirements</value></keyword><git-url>None</git-url></item>
<item><title>A Catalog of UML Model Transformations</title><authors>Kevin Lano </authors><organization>King's College, UK</organization><req-tools>None</req-tools><languages>UML</languages><description><value>This document presents a set of model transformations on UML class and state machine models, as a preliminary version of a comprehensive catalogue for use with UML development. It is oﬀered as a free resource to UML developers. Each transformation is provided with an explanation of its purpose, examples of its use and conditions</value><value>
necessary for its correct use.</value><value>This document presents a set of model transformations on UML class and state machine models, as a preliminary version of a comprehensive catalogue for use with UML development. It is oﬀered as a free resource to UML developers. Each transformation is provided with an explanation of its purpose, examples of its use and conditions</value><value>
necessary for its correct use.</value></description><artifacts-link><value>http://www.dcs.kcl.ac.uk/staff/kcl/tcat.pdf</value><value>http://www.dcs.kcl.ac.uk/staff/kcl/tcat.pdf</value></artifacts-link><artifacts-types><value>Model transformation</value><value>Model transformation</value></artifacts-types><artifacts-dev-context><value>Academia</value><value>Academia</value></artifacts-dev-context><software-domains><value>Model transformation</value><value>Model transformation</value></software-domains><lifecycle-phases></lifecycle-phases><modelinglanguages-notations><value>UML</value><value>UML</value></modelinglanguages-notations><keyword><value>UML model transformations</value><value>UML model transformations</value></keyword><git-url>None</git-url></item>
<item><title>UML-UseCaseDiagram-AssessmentForm(post-workshop)</title><authors>Ana Moreira</authors><organization>Universidade Nova de Lisboa</organization><req-tools>excel</req-tools><languages>None</languages><description></description><artifacts-link></artifacts-link><artifacts-types><value>Requirements Document</value><value>Requirements Document</value></artifacts-types><artifacts-dev-context><value>Academia</value><value>Academia</value></artifacts-dev-context><software-domains></software-domains><lifecycle-phases></lifecycle-phases><modelinglanguages-notations></modelinglanguages-notations><keyword></keyword><git-url>None</git-url></item>
<item><title>Applying BPMN on bCMS</title><authors>Muhammad Atif Qureshi</authors><organization>University of Technology Sydney </organization><req-tools>None</req-tools><languages>None</languages><description></description><artifacts-link></artifacts-link><artifacts-types><value>Model</value><value>Model</value></artifacts-types><artifacts-dev-context><value>Academia</value><value>Workshop/Focus Group</value><value>Academia</value><value>Workshop/Focus Group</value></artifacts-dev-context><software-domains></software-domains><lifecycle-phases><value>Requirements</value><value>Validation/Verification/Analysis</value><value>Implementation/Deployment</value><value>Domain Analysis</value><value>Requirements</value><value>Validation/Verification/Analysis</value><value>Implementation/Deployment</value><value>Domain Analysis</value></lifecycle-phases><modelinglanguages-notations><value>BPMN</value><value>BPMN</value></modelinglanguages-notations><keyword></keyword><git-url>None</git-url></item>
<item><title>SensApp DSML composition case study: From Sensors to Visualization Dashboards</title><authors>Sébastien Mosser, Ivan Logre, Nicolas Ferry, Philippe Collet</authors><organization>Université Nice - Sophia Antipolis, I3S, SINTEF</organization><req-tools>None</req-tools><languages>None</languages><description><value>This file shows several models used in the SensApp case study, using 11 different formalisms. This case study is described in a paper submitted to the GEMOC'2013 workshop, entitled "From Sensors to Visualization Dashboards: Challenges in Languages Composition".</value><value>This file shows several models used in the SensApp case study, using 11 different formalisms. This case study is described in a paper submitted to the GEMOC'2013 workshop, entitled "From Sensors to Visualization Dashboards: Challenges in Languages Composition".</value></description><artifacts-link></artifacts-link><artifacts-types><value>Model</value><value>Model</value></artifacts-types><artifacts-dev-context><value>Research Project</value><value>Research Project</value></artifacts-dev-context><software-domains><value>Internet/Web-based/Cloud Software</value><value>Internet/Web-based/Cloud Software</value></software-domains><lifecycle-phases></lifecycle-phases><modelinglanguages-notations></modelinglanguages-notations><keyword></keyword><git-url>None</git-url></item>
<item><title>Railroad Crossing Management System</title><authors>Matias  Vara Larsen</authors><organization>University of Nice Sophia Antipolis, I3S, </organization><req-tools>Eclipse Juno with EMF
TimeSquare</req-tools><languages>ECL
CCSL</languages><description><value>This artifact includes two models: A fUML Activity diagram which models the "The Barrier Motor Controller" and a TFSM which models the "The Barrier Detection Controller". The artifact includes a CCSL file for each model and the CCSL specification of the integrated models.</value><value>
To run the simulation only is need to have installed TimeSquare in a ECLIPSE juno platform. To simulate then, on the .ccslextended file do "run" &gt; "run as"  and "run". The simulation on TimeSquare should be launched.</value><value>
Don't hesitate to contact me if there is any error in the procedure.</value><value>This artifact includes two models: A fUML Activity diagram which models the "The Barrier Motor Controller" and a TFSM which models the "The Barrier Detection Controller". The artifact includes a CCSL file for each model and the CCSL specification of the integrated models.</value><value>
To run the simulation only is need to have installed TimeSquare in a ECLIPSE juno platform. To simulate then, on the .ccslextended file do "run" &gt; "run as"  and "run". The simulation on TimeSquare should be launched.</value><value>
Don't hesitate to contact me if there is any error in the procedure.</value></description><artifacts-link></artifacts-link><artifacts-types><value>Model</value><value>Model</value></artifacts-types><artifacts-dev-context><value>Academia</value><value>Academia</value></artifacts-dev-context><software-domains></software-domains><lifecycle-phases></lifecycle-phases><modelinglanguages-notations><value>Ecore</value><value>Ecore</value></modelinglanguages-notations><keyword></keyword><git-url>None</git-url></item>
<item><title>Multi-models to aid Decision Making in Enterprises</title><authors>Suman Roychoudhury, Asha Rajbhoj, Vinay Kulkarni, Deepali Kholkar</authors><organization>Tata Consultancy Services</organization><req-tools>OpenOME (http://sourceforge.net/projects/openome/ ) ,
iThink Software ( 
http://www.iseesystems.com/softwares/Business/ithinkSoftware.aspx) ,

Anylogic ( http://www.anylogic.com/downloads )
</req-tools><languages>None</languages><description><value>Intentional Model , System Dynamic Model , Agent based model</value><value>Intentional Model , System Dynamic Model , Agent based model</value></description><artifacts-link></artifacts-link><artifacts-types><value>Model</value><value>Model</value></artifacts-types><artifacts-dev-context><value>Workshop/Focus Group</value><value>Workshop/Focus Group</value></artifacts-dev-context><software-domains><value>adaptive systems</value><value>adaptive systems</value></software-domains><lifecycle-phases><value>Requirements</value><value>Requirements</value></lifecycle-phases><modelinglanguages-notations><value>i*</value><value>i*</value></modelinglanguages-notations><keyword><value>System Dynamc model</value><value>Agent based model</value><value>i* model</value><value>System Dynamc model</value><value>Agent based model</value><value>i* model</value></keyword><git-url>None</git-url></item>
<item><title>Webmail MTS model</title><authors>Marsha Chechik</authors><organization>University of Toronto</organization><req-tools>None</req-tools><languages>None</languages><description><value>An MTS synthesized to represent the Webmail example specification</value><value>An MTS synthesized to represent the Webmail example specification</value></description><artifacts-link></artifacts-link><artifacts-types><value>Model</value><value>Model</value></artifacts-types><artifacts-dev-context><value>Academia</value><value>Academia</value></artifacts-dev-context><software-domains><value>Internet/Web-based/Cloud Software</value><value>Internet/Web-based/Cloud Software</value></software-domains><lifecycle-phases><value>Requirements</value><value>Requirements</value></lifecycle-phases><modelinglanguages-notations><value>MTS</value><value>MTS</value></modelinglanguages-notations><keyword></keyword><git-url>None</git-url></item>
<item><title>Webmail Example Specification</title><authors>Marsha Chechik</authors><organization>University of Toronto</organization><req-tools>None</req-tools><languages>None</languages><description><value>The artifact describes the specification of webmail application example.</value><value>The artifact describes the specification of webmail application example.</value></description><artifacts-link></artifacts-link><artifacts-types><value>Model</value><value>Model</value></artifacts-types><artifacts-dev-context><value>Academia</value><value>Academia</value></artifacts-dev-context><software-domains><value>Internet/Web-based/Cloud Software</value><value>Internet/Web-based/Cloud Software</value></software-domains><lifecycle-phases><value>Requirements</value><value>Requirements</value></lifecycle-phases><modelinglanguages-notations><value>FLTL</value><value>Sequence Diagram</value><value>FLTL</value><value>Sequence Diagram</value></modelinglanguages-notations><keyword></keyword><git-url>None</git-url></item>
<item><title>MontiArcAutomaton BumperBot Models</title><authors>Markus Look, Antonio Navarro Perez, Jan Oliver Ringert, Bernhard Rumpe, Andreas Wortmann</authors><organization>RWTH Aachen University</organization><req-tools>None</req-tools><languages>MontiArc, I/O^ω automata, I/O tables, CD, OCL, the Java ML, and MontiArcAutomaton</languages><description><value>Model of the BumperBot robot. The robot drives forward until it approaches an obstacle, it then drives backwards, rotates, and drives forward again.</value><value>Model of the BumperBot robot. The robot drives forward until it approaches an obstacle, it then drives backwards, rotates, and drives forward again.</value></description><artifacts-link><value>http://www.se-rwth.de/materials/montiarcautomaton/</value><value>http://www.se-rwth.de/materials/montiarcautomaton/</value></artifacts-link><artifacts-types><value>Model</value><value>Model</value></artifacts-types><artifacts-dev-context><value>Research Project</value><value>Research Project</value></artifacts-dev-context><software-domains><value>Cyberphysical Systems</value><value>Embedded Software</value><value>Cyberphysical Systems</value><value>Embedded Software</value></software-domains><lifecycle-phases><value>Implementation</value><value>Implementation</value></lifecycle-phases><modelinglanguages-notations><value>MontiArcAutomaton</value><value>MontiArcAutomaton</value></modelinglanguages-notations><keyword><value>CPS</value><value>Language Integration</value><value>Modeling Languages</value><value>Software Architecture Modeling</value><value>CPS</value><value>Language Integration</value><value>Modeling Languages</value><value>Software Architecture Modeling</value></keyword><git-url>None</git-url></item>
<item><title>URML Model of bCMS (HTML Export)</title><authors>Florian Schneider</authors><organization>Technische Universität München</organization><req-tools>Web Browser</req-tools><languages>URML</languages><description></description><artifacts-link><value>http://www1.in.tum.de/lehrstuhl_1/files/bCMS.zip</value><value>http://www1.in.tum.de/urml#SampleModels</value><value>http://www1.in.tum.de/lehrstuhl_1/files/bCMS.zip</value><value>http://www1.in.tum.de/urml#SampleModels</value></artifacts-link><artifacts-types><value>Model</value><value>Model</value></artifacts-types><artifacts-dev-context><value>Academia</value><value>Workshop/Focus Group</value><value>Academia</value><value>Workshop/Focus Group</value></artifacts-dev-context><software-domains><value>Business/Information Systems</value><value>Software Product Line</value><value>Business/Information Systems</value><value>Software Product Line</value></software-domains><lifecycle-phases><value>Requirements</value><value>Requirements</value></lifecycle-phases><modelinglanguages-notations><value>URML</value><value>URML</value></modelinglanguages-notations><keyword><value>bCMS</value><value>Early Requirements</value><value>CMA@RE2013</value><value>URML</value><value>bCMS</value><value>Early Requirements</value><value>CMA@RE2013</value><value>URML</value></keyword><git-url>None</git-url></item>
<item><title>Behavior as-is</title><authors>George Popescu</authors><organization>École Polytechnique Fédérale de Lausanne</organization><req-tools>None</req-tools><languages>SeamCAD 3.5.10</languages><description><value>Behavior as-is model</value><value>Behavior as-is model</value></description><artifacts-link></artifacts-link><artifacts-types><value>Model</value><value>Model</value></artifacts-types><artifacts-dev-context><value>Academia</value><value>Academia</value></artifacts-dev-context><software-domains><value>Enterprise Systems</value><value>Enterprise Systems</value></software-domains><lifecycle-phases><value>System</value><value>Requirements</value><value>System</value><value>Requirements</value></lifecycle-phases><modelinglanguages-notations><value>SEAM</value><value>SEAM</value></modelinglanguages-notations><keyword><value>CMA@RE2013</value><value>Behavior as-is</value><value>CMA@RE2013</value><value>Behavior as-is</value></keyword><git-url>None</git-url></item>
<item><title>Behavior to-be</title><authors>George Popescu</authors><organization>École Polytechnique Fédérale de Lausanne</organization><req-tools>None</req-tools><languages>SeamCAD 3.5.10</languages><description><value>Behavior to-be model</value><value>Behavior to-be model</value></description><artifacts-link></artifacts-link><artifacts-types><value>Model</value><value>Model</value></artifacts-types><artifacts-dev-context><value>Academia</value><value>Academia</value></artifacts-dev-context><software-domains><value>Enterprise Systems</value><value>Enterprise Systems</value></software-domains><lifecycle-phases><value>System</value><value>Requirements</value><value>System</value><value>Requirements</value></lifecycle-phases><modelinglanguages-notations><value>SEAM</value><value>SEAM</value></modelinglanguages-notations><keyword><value>CMA@RE2013</value><value>Behavior to-be</value><value>CMA@RE2013</value><value>Behavior to-be</value></keyword><git-url>None</git-url></item>
<item><title>Witness Goal-Belief</title><authors>George Popescu</authors><organization>École Polytechnique Fédérale de Lausanne</organization><req-tools>None</req-tools><languages>SeamCAD 3.5.10</languages><description><value>The Goal-Belief representation of the Witness</value><value>The Goal-Belief representation of the Witness</value></description><artifacts-link></artifacts-link><artifacts-types><value>Model</value><value>Model</value></artifacts-types><artifacts-dev-context><value>Academia</value><value>Academia</value></artifacts-dev-context><software-domains><value>Enterprise Systems</value><value>Enterprise Systems</value></software-domains><lifecycle-phases><value>System</value><value>Requirements</value><value>System</value><value>Requirements</value></lifecycle-phases><modelinglanguages-notations><value>SEAM</value><value>SEAM</value></modelinglanguages-notations><keyword><value>CMA@RE2013</value><value>Goal-Belief</value><value>CMA@RE2013</value><value>Goal-Belief</value></keyword><git-url>None</git-url></item>
<item><title>Complete Goal-Belief</title><authors>George Popescu</authors><organization>École Polytechnique Fédérale de Lausanne</organization><req-tools>None</req-tools><languages>SeamCAD 3.5.10</languages><description><value>The complete Goal-Belief representation of all actors.</value><value>The complete Goal-Belief representation of all actors.</value></description><artifacts-link></artifacts-link><artifacts-types><value>Model</value><value>Model</value></artifacts-types><artifacts-dev-context><value>Academia</value><value>Academia</value></artifacts-dev-context><software-domains><value>Enterprise Systems</value><value>Enterprise Systems</value></software-domains><lifecycle-phases><value>System</value><value>System</value></lifecycle-phases><modelinglanguages-notations><value>SEAM</value><value>SEAM</value></modelinglanguages-notations><keyword><value>CMA@RE2013</value><value>Goal-Belief</value><value>CMA@RE2013</value><value>Goal-Belief</value></keyword><git-url>None</git-url></item>
<item><title>Requirements Modeling in SEAM: The Example of a Car Crash Management System</title><authors>George Popescu</authors><organization>École Polytechnique Fédérale de Lausanne</organization><req-tools>None</req-tools><languages>SeamCAD</languages><description><value>Requirements Modeling in SEAM: The Example of a Car Crash Management System - </value><value> paper</value><value>Requirements Modeling in SEAM: The Example of a Car Crash Management System - </value><value> paper</value></description><artifacts-link></artifacts-link><artifacts-types><value>Assessment</value><value>Case study</value><value>Methodology/Technique/Process</value><value>Model</value><value>Assessment</value><value>Case study</value><value>Methodology/Technique/Process</value><value>Model</value></artifacts-types><artifacts-dev-context><value>Academia</value><value>Research Project</value><value>Workshop/Focus Group</value><value>Academia</value><value>Research Project</value><value>Workshop/Focus Group</value></artifacts-dev-context><software-domains><value>Enterprise Systems</value><value>Enterprise Systems</value></software-domains><lifecycle-phases><value>System</value><value>Domain Analysis</value><value>Requirements</value><value>System</value><value>Domain Analysis</value><value>Requirements</value></lifecycle-phases><modelinglanguages-notations><value>SEAM</value><value>SEAM</value></modelinglanguages-notations><keyword><value>Requirements engineering</value><value>SEAM</value><value>car crash</value><value>Requirements engineering</value><value>SEAM</value><value>car crash</value></keyword><git-url>None</git-url></item>
<item><title>Using AMoDE-RT and DERAF to specify a Crisis Management System -- Complete Model Description</title><authors>Marco Aurelio Wehrmeister</authors><organization>Federal University of Technology - Parana (UTFPR)</organization><req-tools>Magic Draw modeling tool</req-tools><languages>UML, MARTE, DERAF</languages><description><value>Complete description of the Car Crisis Management System case study performed using AMoDE-RT approach and DERAF aspects framework.</value><value>Complete description of the Car Crisis Management System case study performed using AMoDE-RT approach and DERAF aspects framework.</value></description><artifacts-link><value>http://www.dainf.ct.utfpr.edu.br/~marcow/dokuwiki/doku.php?id=projects#amode-rt_and_genertica</value><value>http://www.dainf.ct.utfpr.edu.br/~marcow/publications/wehrmeister_thesis_final.pdf</value><value>http://www.dainf.ct.utfpr.edu.br/~marcow/dokuwiki/doku.php?id=projects#amode-rt_and_genertica</value><value>http://www.dainf.ct.utfpr.edu.br/~marcow/publications/wehrmeister_thesis_final.pdf</value></artifacts-link><artifacts-types><value>Case study</value><value>Methodology/Technique/Process</value><value>Model</value><value>Case study</value><value>Methodology/Technique/Process</value><value>Model</value></artifacts-types><artifacts-dev-context><value>Workshop/Focus Group</value><value>Workshop/Focus Group</value></artifacts-dev-context><software-domains></software-domains><lifecycle-phases><value>Design</value><value>Design</value></lifecycle-phases><modelinglanguages-notations><value>UML</value><value>MARTE</value><value>DERAF</value><value>JPDD</value><value>UML</value><value>MARTE</value><value>DERAF</value><value>JPDD</value></modelinglanguages-notations><keyword><value>CMA@RE2013</value><value>case study description</value><value>aspect-oriented software development</value><value>AMoDE-RT</value><value>DERAF</value><value>CMA@RE2013</value><value>case study description</value><value>aspect-oriented software development</value><value>AMoDE-RT</value><value>DERAF</value></keyword><git-url>None</git-url></item>
<item><title>bCMS Case Study: FAMILIAR</title><authors>Philippe Collet</authors><organization>Université Nice Sophia Antipolis</organization><req-tools>Familiar v1.0.7 or upper: https://github.com/FAMILIAR-project/familiar-documentation/tree/master/installation</req-tools><languages>Feature Modeling with Familiar</languages><description><value>This artifact is two-fold: 1. The pdf report is the companion document to the paper presenting FAMILIAR as a feature-oriented approach to requirement and design modeling. It contains descriptions of input files, FAMILIAR scripts and results while illustrating the approach. The bCMS-SPL variability is captured and organized with scripts. It is also related to some technical variabilities of a supposed J2EE platform. 2. All FAMILIAR scripts and input files of this case study, which can be replayed by the FAMILIAR tool.</value><value>This artifact is two-fold: 1. The pdf report is the companion document to the paper presenting FAMILIAR as a feature-oriented approach to requirement and design modeling. It contains descriptions of input files, FAMILIAR scripts and results while illustrating the approach. The bCMS-SPL variability is captured and organized with scripts. It is also related to some technical variabilities of a supposed J2EE platform. 2. All FAMILIAR scripts and input files of this case study, which can be replayed by the FAMILIAR tool.</value></description><artifacts-link></artifacts-link><artifacts-types><value>Model</value><value>Model</value></artifacts-types><artifacts-dev-context><value>Academia</value><value>Challenge Problem/Competition</value><value>Workshop/Focus Group</value><value>Academia</value><value>Challenge Problem/Competition</value><value>Workshop/Focus Group</value></artifacts-dev-context><software-domains><value>Reactive System</value><value>Software Product Line</value><value>Reactive System</value><value>Software Product Line</value></software-domains><lifecycle-phases><value>Requirements</value><value>Validation/Verification/Analysis</value><value>Domain Analysis</value><value>Requirements</value><value>Validation/Verification/Analysis</value><value>Domain Analysis</value></lifecycle-phases><modelinglanguages-notations><value>Familiar</value><value>Familiar</value></modelinglanguages-notations><keyword><value>CMA@RE2013</value><value>CMA@RE2013</value></keyword><git-url>None</git-url></item>
<item><title>Behavior as-is and to-be and Goal-Belief models</title><authors>George Popescu</authors><organization>École Polytechnique Fédérale de Lausanne</organization><req-tools>None</req-tools><languages>SeamCAD v. 3.5.10 and 4.0.17</languages><description><value>Complete SEAM models: Behavior as-is, Behavior to-be, Witness Goal-Belief, Complete Goal-Belief.</value><value>Complete SEAM models: Behavior as-is, Behavior to-be, Witness Goal-Belief, Complete Goal-Belief.</value></description><artifacts-link></artifacts-link><artifacts-types><value>Case study</value><value>Model</value><value>Case study</value><value>Model</value></artifacts-types><artifacts-dev-context><value>Academia</value><value>Challenge Problem/Competition</value><value>Research Project</value><value>Workshop/Focus Group</value><value>Academia</value><value>Challenge Problem/Competition</value><value>Research Project</value><value>Workshop/Focus Group</value></artifacts-dev-context><software-domains><value>Enterprise Systems</value><value>Enterprise Systems</value></software-domains><lifecycle-phases><value>Requirements</value><value>Domain Analysis</value><value>System</value><value>Requirements</value><value>Domain Analysis</value><value>System</value></lifecycle-phases><modelinglanguages-notations><value>SEAM</value><value>SEAM</value></modelinglanguages-notations><keyword><value>CMA@RE2013</value><value>Behavior as-is</value><value>Behavior to-be</value><value>Goal-Belief</value><value>SEAM model</value><value>CMA@RE2013</value><value>Behavior as-is</value><value>Behavior to-be</value><value>Goal-Belief</value><value>SEAM model</value></keyword><git-url>None</git-url></item>
<item><title>Coloured Petri Net Model of the bCMS system using CPN Tools</title><authors>Isabel Sofia Sousa Brito, João Paulo Barros</authors><organization>Polytechnic Institute of Beja</organization><req-tools>CPN Tools</req-tools><languages>Coloured petri nets and Standard ML.</languages><description><value>The presented model was constructed as a high-level specification of the bCMS system using CPN Tools. Then, we have shown how non-functional requirements can be added. In particular, the use of timed CPN models can offer a further level of specification towards the creation of more detailed executable prototypes.</value><value>The presented model was constructed as a high-level specification of the bCMS system using CPN Tools. Then, we have shown how non-functional requirements can be added. In particular, the use of timed CPN models can offer a further level of specification towards the creation of more detailed executable prototypes.</value></description><artifacts-link></artifacts-link><artifacts-types><value>Model</value><value>Model</value></artifacts-types><artifacts-dev-context><value>Workshop/Focus Group</value><value>Workshop/Focus Group</value></artifacts-dev-context><software-domains><value>Real-time embedded systems</value><value>System Software</value><value>Real-time embedded systems</value><value>System Software</value></software-domains><lifecycle-phases><value>Requirements</value><value>System</value><value>Requirements</value><value>System</value></lifecycle-phases><modelinglanguages-notations><value>Petri nets (Coloured)</value><value>Petri nets (Coloured)</value></modelinglanguages-notations><keyword><value>Requirements</value><value>CMA@RE2013</value><value>coloured petri nets</value><value>executable</value><value>verification</value><value>Requirements</value><value>CMA@RE2013</value><value>coloured petri nets</value><value>executable</value><value>verification</value></keyword><git-url>None</git-url></item>
<item><title>CMA@RE SysMLKaosVersionRemodd.pdf</title><authors>Christophe Gnaho^1, Régine Laleau^1, Farida Semmak^1, Jean-Michel Bruel^2</authors><organization>1 LACL / University Paris-Est Créteil, 2 IRIT / University of Toulouse </organization><req-tools>None</req-tools><languages>SysML, KAOS, NFR</languages><description></description><artifacts-link></artifacts-link><artifacts-types><value>Case study</value><value>Requirements Document</value><value>Case study</value><value>Requirements Document</value></artifacts-types><artifacts-dev-context><value>Research Project</value><value>Research Project</value></artifacts-dev-context><software-domains></software-domains><lifecycle-phases><value>Requirements</value><value>Requirements</value></lifecycle-phases><modelinglanguages-notations></modelinglanguages-notations><keyword><value>CMA@RE2013</value><value>CMA@RE2013</value></keyword><git-url>None</git-url></item>
<item><title>RELAX/SysML/KAOS</title><authors>Jean-Michel Bruel</authors><organization>University of Toulouse / IRIT</organization><req-tools>For RELAX any text editor (although we're currently developing an XText-based editor called COOL).
For SysML, there is many (UML-based) editors, such as Topcased.
For KAOS the are some commercial tools available (although a SysML/KAOS editor is under development).</req-tools><languages>RELAX, SysML, KAOS</languages><description><value>The purpose of the artefact is to divide requirements into invariant and relaxed requirements and then using the correspondance rules b/w Relax and SysML/Kaos, obtain goal models to take advantages of the goal oriented requirements engineering concepts i.e. SysML/Kaos	. Contact </value><value> for more details.</value><value>The purpose of the artefact is to divide requirements into invariant and relaxed requirements and then using the correspondance rules b/w Relax and SysML/Kaos, obtain goal models to take advantages of the goal oriented requirements engineering concepts i.e. SysML/Kaos	. Contact </value><value> for more details.</value></description><artifacts-link></artifacts-link><artifacts-types><value>Methodology/Technique/Process</value><value>Methodology/Technique/Process</value></artifacts-types><artifacts-dev-context><value>Academia</value><value>Academia</value></artifacts-dev-context><software-domains><value>adaptive systems</value><value>System Software</value><value>adaptive systems</value><value>System Software</value></software-domains><lifecycle-phases><value>Requirements</value><value>Requirements</value></lifecycle-phases><modelinglanguages-notations><value>KAOS</value><value>SysML</value><value>KAOS</value><value>SysML</value></modelinglanguages-notations><keyword><value>CMA@RE2013</value><value>Self-adaptive systems</value><value>Non-functional properties</value><value>Requirements elicitation</value><value>CMA@RE2013</value><value>Self-adaptive systems</value><value>Non-functional properties</value><value>Requirements elicitation</value></keyword><git-url>None</git-url></item>
<item><title>Modeling Car Crash Management with KAOS</title><authors>Antoine Cailliau, Christophe Damas, Bernard Lambeau, and Axel van Lamsweerde</authors><organization>Université catholique de Louvain</organization><req-tools>None</req-tools><languages>KAOS</languages><description></description><artifacts-link></artifacts-link><artifacts-types><value>Case study</value><value>Case study</value></artifacts-types><artifacts-dev-context><value>Workshop/Focus Group</value><value>Workshop/Focus Group</value></artifacts-dev-context><software-domains></software-domains><lifecycle-phases><value>Requirements</value><value>Domain Analysis</value><value>System</value><value>Requirements</value><value>Domain Analysis</value><value>System</value></lifecycle-phases><modelinglanguages-notations><value>KAOS</value><value>KAOS</value></modelinglanguages-notations><keyword><value>CMA@RE2013</value><value>CMA@RE2013</value></keyword><git-url>None</git-url></item>
<item><title>CMS:Lassy:REACT SPL Feature Model and Feature Mapping</title><authors> Marc Leclercq, Nicolas Guelfi</authors><organization>LASSY, University of Luxembourg</organization><req-tools>None</req-tools><languages>None</languages><description><value>Provides a more up-to-date, understandable and “product line –like” view of the models of the REACT product line. More automation is provided to the derivation process, especially for the step of selecting the assets to include in the product variant. The automation will also allow an easier and simplified derivation of product variants, and will also reduce the error probability of the derivation process. In fact, we use the tools Pure::Variants and FeatureMapper to create a feature model of features of the platform and map those features to the assets. The user that wants to create variants only have to specify which features he wants to include in his product. The tools automatically creates the selection of the business objects and service components. The feature model also contains the relations between the features and information about whether a feature is selectable or not (depending on the relations and the type of the feature), which will help the user and also avoid the possibility of creating products with incompatible features.</value><value>Provides a more up-to-date, understandable and “product line –like” view of the models of the REACT product line. More automation is provided to the derivation process, especially for the step of selecting the assets to include in the product variant. The automation will also allow an easier and simplified derivation of product variants, and will also reduce the error probability of the derivation process. In fact, we use the tools Pure::Variants and FeatureMapper to create a feature model of features of the platform and map those features to the assets. The user that wants to create variants only have to specify which features he wants to include in his product. The tools automatically creates the selection of the business objects and service components. The feature model also contains the relations between the features and information about whether a feature is selectable or not (depending on the relations and the type of the feature), which will help the user and also avoid the possibility of creating products with incompatible features.</value></description><artifacts-link></artifacts-link><artifacts-types><value>Methodology/Technique/Process</value><value>Model</value><value>Methodology/Technique/Process</value><value>Model</value></artifacts-types><artifacts-dev-context><value>Academia</value><value>Academia</value></artifacts-dev-context><software-domains></software-domains><lifecycle-phases></lifecycle-phases><modelinglanguages-notations></modelinglanguages-notations><keyword></keyword><git-url>None</git-url></item>
<item><title>Modeling Crisis Management System with the Restricted Use Case Modeling Approach</title><authors>Gong Zhang^1, Tao Yue^2, Shaukat Ali^2</authors><organization>1 Beihang University, 2 Simula Research Laboratory</organization><req-tools>None</req-tools><languages>Restricted Use Case Modeling</languages><description><value>In this work, we modeled the Crisis Management System (CMS) case study using a new use case modeling approach, named as Restricted Use Case Modeling (RUCM), which is composed of a set of well-defined restriction rules and a new template. The goal was to reduce ambiguity and facilitate automated analysis. Our experience proved that RUCM is easy to apply and sufficient to capture the requirements provided for the case study.</value><value>
For more information about RUCM, please visit: </value><value>In this work, we modeled the Crisis Management System (CMS) case study using a new use case modeling approach, named as Restricted Use Case Modeling (RUCM), which is composed of a set of well-defined restriction rules and a new template. The goal was to reduce ambiguity and facilitate automated analysis. Our experience proved that RUCM is easy to apply and sufficient to capture the requirements provided for the case study.</value><value>
For more information about RUCM, please visit: </value></description><artifacts-link></artifacts-link><artifacts-types><value>Model</value><value>Model</value></artifacts-types><artifacts-dev-context><value>Industry</value><value>Research Project</value><value>Industry</value><value>Research Project</value></artifacts-dev-context><software-domains><value>Distributed System</value><value>Crisis Management System</value><value>Distributed System</value><value>Crisis Management System</value></software-domains><lifecycle-phases><value>Requirements</value><value>Requirements</value></lifecycle-phases><modelinglanguages-notations><value>Restricted Use Case Modeling</value><value>Restricted Use Case Modeling</value></modelinglanguages-notations><keyword><value>CMA@MODELS2013</value><value>Restricted Use Case Modeling</value><value>Crisis Management System</value><value>Use Case Template</value><value>Restriction Rules</value><value>CMA@MODELS2013</value><value>Restricted Use Case Modeling</value><value>Crisis Management System</value><value>Use Case Template</value><value>Restriction Rules</value></keyword><git-url>None</git-url></item>
<item><title>NewCarCrashSPL</title><authors>Bellairs AOM Working Group</authors><organization>Please update</organization><req-tools>None</req-tools><languages>None</languages><description><value>Models produced at Barbados AOM workshop.</value><value>Models produced at Barbados AOM workshop.</value></description><artifacts-link></artifacts-link><artifacts-types><value>Model</value><value>Model</value></artifacts-types><artifacts-dev-context><value>Academia</value><value>Academia</value></artifacts-dev-context><software-domains><value>Business/Information Systems</value><value>Business/Information Systems</value></software-domains><lifecycle-phases><value>Requirements</value><value>Requirements</value></lifecycle-phases><modelinglanguages-notations></modelinglanguages-notations><keyword></keyword><git-url>None</git-url></item>
<item><title>MOBIES Powertrain Models</title><authors> William Milam</authors><organization>Ford Motor Research</organization><req-tools>None</req-tools><languages>None</languages><description><value>Powertrain models from the DARPA MOBIES project provided by William Milam, Ford Motor Research. Models were developed in Simulink and Stateflow.</value><value>Powertrain models from the DARPA MOBIES project provided by William Milam, Ford Motor Research. Models were developed in Simulink and Stateflow.</value></description><artifacts-link></artifacts-link><artifacts-types><value>Model</value><value>Model</value></artifacts-types><artifacts-dev-context><value>Academia</value><value>Industry</value><value>Academia</value><value>Industry</value></artifacts-dev-context><software-domains><value>Automotive</value><value>Automotive</value></software-domains><lifecycle-phases></lifecycle-phases><modelinglanguages-notations><value>Simulink</value><value>Stateflow</value><value>Simulink</value><value>Stateflow</value></modelinglanguages-notations><keyword></keyword><git-url>None</git-url></item>
<item><title>Models of the ODP specification of the PhoneMob system</title><authors> Peter F. Linington, Zoran Milosevic, Akira Tanaka, Antonio Vallecillo</authors><organization>Please complete</organization><req-tools>None</req-tools><languages>None</languages><description><value>This set of models contains the ODP specifications of the PhoneMob system, which is described in the book "Building Enterprise Systems with ODP -- An Introduction to Open Distributed Processing" (</value><value>). The models are written in UML, using the UML4ODP profile -- a profile to write ODP systems specifications using UML.</value><value>This set of models contains the ODP specifications of the PhoneMob system, which is described in the book "Building Enterprise Systems with ODP -- An Introduction to Open Distributed Processing" (</value><value>). The models are written in UML, using the UML4ODP profile -- a profile to write ODP systems specifications using UML.</value></description><artifacts-link></artifacts-link><artifacts-types><value>Methodology/Technique/Process</value><value>Model</value><value>Methodology/Technique/Process</value><value>Model</value></artifacts-types><artifacts-dev-context><value>Academia</value><value>Academia</value></artifacts-dev-context><software-domains><value>Enterprise Systems</value><value>Enterprise Systems</value></software-domains><lifecycle-phases></lifecycle-phases><modelinglanguages-notations></modelinglanguages-notations><keyword></keyword><git-url>None</git-url></item>
<item><title>Video Conferencing System</title><authors>Shaukat Ali, Lionel Briand</authors><organization>Sintef, Norway</organization><req-tools>None</req-tools><languages>None</languages><description><value>This submission contains models for Video Conferencing System (VCS) developed to conduct a controlled experiment. The models are developed in IBM Rational Software Architect (7.5).</value><value>This submission contains models for Video Conferencing System (VCS) developed to conduct a controlled experiment. The models are developed in IBM Rational Software Architect (7.5).</value></description><artifacts-link></artifacts-link><artifacts-types><value>Model</value><value>Model</value></artifacts-types><artifacts-dev-context><value>Academia</value><value>Academia</value></artifacts-dev-context><software-domains></software-domains><lifecycle-phases></lifecycle-phases><modelinglanguages-notations></modelinglanguages-notations><keyword></keyword><git-url>None</git-url></item>
<item><title>Elevator Control System</title><authors>Shaukat Ali, Lionel Briand</authors><organization>Simula Labs, Norway</organization><req-tools>None</req-tools><languages>None</languages><description><value>This submission contains the models for elevator control system (ECS) developed to conduct an empirical study. The models are developed in IBM Rational Software Architect (7.5).</value><value>This submission contains the models for elevator control system (ECS) developed to conduct an empirical study. The models are developed in IBM Rational Software Architect (7.5).</value></description><artifacts-link></artifacts-link><artifacts-types><value>Model</value><value>Model</value></artifacts-types><artifacts-dev-context><value>Academia</value><value>Academia</value></artifacts-dev-context><software-domains></software-domains><lifecycle-phases></lifecycle-phases><modelinglanguages-notations></modelinglanguages-notations><keyword></keyword><git-url>None</git-url></item>
<item><title>TimedCaaFWrk - Coordinated Atomic Actions Meta-Model</title><authors>Alfredo Capozucca</authors><organization>Univesity of Luxembourg</organization><req-tools>None</req-tools><languages>None</languages><description><value>Meta-Model definition of a new version of the Coordinated Atomic Actions conceptual framework that includes real-time extensions. More information about this meta-model and its enclosed concepts can be found at "A. Capozucca, DT4BP: a Business Process Modelling Language for Dependable Time-Constrained Business Processes, phd thesis, University of Luxembourg, 2010".</value><value>Meta-Model definition of a new version of the Coordinated Atomic Actions conceptual framework that includes real-time extensions. More information about this meta-model and its enclosed concepts can be found at "A. Capozucca, DT4BP: a Business Process Modelling Language for Dependable Time-Constrained Business Processes, phd thesis, University of Luxembourg, 2010".</value></description><artifacts-link></artifacts-link><artifacts-types><value>Methodology/Technique/Process</value><value>Methodology/Technique/Process</value></artifacts-types><artifacts-dev-context><value>Academia</value><value>Academia</value></artifacts-dev-context><software-domains></software-domains><lifecycle-phases></lifecycle-phases><modelinglanguages-notations><value>Ecore</value><value>Ecore</value></modelinglanguages-notations><keyword></keyword><git-url>None</git-url></item>
<item><title>DT4BP - Syntactic Definition</title><authors>Alfredo Capozucca</authors><organization>University of Luxembourg</organization><req-tools>None</req-tools><languages>None</languages><description><value>This document gives the syntactic specification of the DT4BP business process modelling language. Context-free grammar (grammar, for short), which is also sometimes called BNF,  is the common notation used to specify the syntax of a language.</value><value>This document gives the syntactic specification of the DT4BP business process modelling language. Context-free grammar (grammar, for short), which is also sometimes called BNF,  is the common notation used to specify the syntax of a language.</value></description><artifacts-link></artifacts-link><artifacts-types><value>Methodology/Technique/Process</value><value>Methodology/Technique/Process</value></artifacts-types><artifacts-dev-context><value>Academia</value><value>Academia</value></artifacts-dev-context><software-domains></software-domains><lifecycle-phases></lifecycle-phases><modelinglanguages-notations></modelinglanguages-notations><keyword></keyword><git-url>None</git-url></item>
<item><title>DT4BP - Meta-Model</title><authors>Alfredo Capozucca</authors><organization>University of Luxembourg</organization><req-tools>None</req-tools><languages>None</languages><description><value>Meta-Model definition of the DT4BP business process modelling language.</value><value>Meta-Model definition of the DT4BP business process modelling language.</value></description><artifacts-link></artifacts-link><artifacts-types><value>Methodology/Technique/Process</value><value>Model</value><value>Methodology/Technique/Process</value><value>Model</value></artifacts-types><artifacts-dev-context><value>Academia</value><value>Academia</value></artifacts-dev-context><software-domains></software-domains><lifecycle-phases></lifecycle-phases><modelinglanguages-notations><value>Ecore</value><value>Ecore</value></modelinglanguages-notations><keyword></keyword><git-url>None</git-url></item>
<item><title>AoURN and RAM models of the Crisis Management System</title><authors> Gunter Mussbacher^1, Jörg Kienzle^2</authors><organization>1 Carleton University, 2 McGill University</organization><req-tools>None</req-tools><languages>None</languages><description><value>The models in this zip file demonstrate a model-driven software development process for reactive system development. The process relies on the Aspect-Oriented User Requirements Notation (AoURN) to capture and specify workflow requirements, and on Reusable Aspect Models (RAM) for specifying the design of the system under development.</value><value>
The models presented focus on the Capture Witness Report (CWR) use case of the Crisis Management System case study [1]. The use case map that corresponds to the CWR use case is presented in model "AoURN-CaptureWitnessReport.pdf", and the authentication concern that applies (among others) to capturing the witness report is modelled in "AoURN-Authentication.pdf".</value><value>
Not all the RAM models for the entire use case are presented, but only the ones that are involved in the first input-process-output step, i.e. from the reception of the input containing the witness name and address to the sending of the two outputs. One output is sent to the phone company asking for information on the witness and the other one to the crisis coordinator asking for crisis details. File "Cccms_RAM_design_dependencies.pdf" shows an overview of how the individual RAM models depend on each other.</value><value>
[1] J. Kienzle, N. Guelfi, and S. Mustafiz, “Crisis Management Systems: A Case Study for Aspect- Oriented Modeling,” Transactions on Aspect-Oriented Software Development, vol. 7, pp. 1 – 22, 2010.</value><value>The models in this zip file demonstrate a model-driven software development process for reactive system development. The process relies on the Aspect-Oriented User Requirements Notation (AoURN) to capture and specify workflow requirements, and on Reusable Aspect Models (RAM) for specifying the design of the system under development.</value><value>
The models presented focus on the Capture Witness Report (CWR) use case of the Crisis Management System case study [1]. The use case map that corresponds to the CWR use case is presented in model "AoURN-CaptureWitnessReport.pdf", and the authentication concern that applies (among others) to capturing the witness report is modelled in "AoURN-Authentication.pdf".</value><value>
Not all the RAM models for the entire use case are presented, but only the ones that are involved in the first input-process-output step, i.e. from the reception of the input containing the witness name and address to the sending of the two outputs. One output is sent to the phone company asking for information on the witness and the other one to the crisis coordinator asking for crisis details. File "Cccms_RAM_design_dependencies.pdf" shows an overview of how the individual RAM models depend on each other.</value><value>
[1] J. Kienzle, N. Guelfi, and S. Mustafiz, “Crisis Management Systems: A Case Study for Aspect- Oriented Modeling,” Transactions on Aspect-Oriented Software Development, vol. 7, pp. 1 – 22, 2010.</value></description><artifacts-link></artifacts-link><artifacts-types><value>Methodology/Technique/Process</value><value>Model</value><value>Methodology/Technique/Process</value><value>Model</value></artifacts-types><artifacts-dev-context><value>Academia</value><value>Academia</value></artifacts-dev-context><software-domains></software-domains><lifecycle-phases></lifecycle-phases><modelinglanguages-notations><value>UML</value><value>UML</value></modelinglanguages-notations><keyword></keyword><git-url>None</git-url></item>
<item><title>DT4BP to TimedCaaFWrk model transformation</title><authors>Alfredo Capozucca</authors><organization>University of Luxembourg</organization><req-tools>Eclipse Modeling Tools 
</req-tools><languages>ATL</languages><description><value>Model-to-Model transformation. This transformation allows a DT4BP complaint model to be translated to a Timed-CaaFWrk complaint model. The model transformation is used as translational semantics to defined part of the DT4BP modeling language</value><value>Model-to-Model transformation. This transformation allows a DT4BP complaint model to be translated to a Timed-CaaFWrk complaint model. The model transformation is used as translational semantics to defined part of the DT4BP modeling language</value></description><artifacts-link></artifacts-link><artifacts-types><value>Model</value><value>Tool</value><value>Model</value><value>Tool</value></artifacts-types><artifacts-dev-context><value>Academia</value><value>Industry</value><value>Academia</value><value>Industry</value></artifacts-dev-context><software-domains><value>Model transformation</value><value>Model transformation</value></software-domains><lifecycle-phases><value>Domain Analysis</value><value>Domain Analysis</value></lifecycle-phases><modelinglanguages-notations></modelinglanguages-notations><keyword></keyword><git-url>None</git-url></item>
<item><title>UML Class Diagram Patterns</title><authors>Azzam Maraee, Mira Balaban, Arnon Strum, Adiel Ashrov</authors><organization>Ben Gurion University </organization><req-tools>None</req-tools><languages>UML 2</languages><description><value>A catalog of modeling anti-patterns for problems of correctness and quality in class diagram design. It is developed by the BGU Modeling Group. The catalog accumulates knowledge regarding design problems by presenting them as patterns and classifying them into different categories based on the kind of problems they cover. The patterns of correctness problems characterize typical situations in which correctness problems arise, analyze the causes, and suggest possible solutions.</value><value>A catalog of modeling anti-patterns for problems of correctness and quality in class diagram design. It is developed by the BGU Modeling Group. The catalog accumulates knowledge regarding design problems by presenting them as patterns and classifying them into different categories based on the kind of problems they cover. The patterns of correctness problems characterize typical situations in which correctness problems arise, analyze the causes, and suggest possible solutions.</value></description><artifacts-link><value>http://www.cs.bgu.ac.il/~cd-patterns/</value><value>http://www.cs.bgu.ac.il/~cd-patterns/</value></artifacts-link><artifacts-types><value>Model</value><value>pattern catalog</value><value>Model</value><value>pattern catalog</value></artifacts-types><artifacts-dev-context><value>Academia</value><value>Research Project</value><value>Academia</value><value>Research Project</value></artifacts-dev-context><software-domains></software-domains><lifecycle-phases></lifecycle-phases><modelinglanguages-notations><value>class diagram</value><value>class diagram</value></modelinglanguages-notations><keyword><value>Class diagram</value><value>patterns</value><value>correctness problems</value><value>quality problems</value><value>consistency</value><value>finite satisfiability</value><value>redundancy</value><value>incomplete design</value><value>abstraction</value><value>Class diagram</value><value>patterns</value><value>correctness problems</value><value>quality problems</value><value>consistency</value><value>finite satisfiability</value><value>redundancy</value><value>incomplete design</value><value>abstraction</value></keyword><git-url>None</git-url></item>
<item><title>Model Driven Service Engineering applied to bCMS</title><authors>Urooj Fatima, Rolv Braek</authors><organization>Department of Telematics, NTNU</organization><req-tools>None</req-tools><languages>UML 2 collaborations and activity diagrams</languages><description><value>The Object-Oriented Modeling (OOM) approach is used for developing the model of the focused case study i.e. Crises Management System. Our approach targets the requirements specification and design phase of the software development process. We choose to focus on the single system i.e. bCMS.</value><value>
The method uses UML 2 collaborations for service structure and activity diagrams for both global behaviour (choreography) and local component behaviour (orchestration). The behaviour of each system component is designed as a composition of the roles it plays in different services.</value><value>The Object-Oriented Modeling (OOM) approach is used for developing the model of the focused case study i.e. Crises Management System. Our approach targets the requirements specification and design phase of the software development process. We choose to focus on the single system i.e. bCMS.</value><value>
The method uses UML 2 collaborations for service structure and activity diagrams for both global behaviour (choreography) and local component behaviour (orchestration). The behaviour of each system component is designed as a composition of the roles it plays in different services.</value></description><artifacts-link></artifacts-link><artifacts-types><value>Model</value><value>Model</value></artifacts-types><artifacts-dev-context><value>Workshop/Focus Group</value><value>Workshop/Focus Group</value></artifacts-dev-context><software-domains></software-domains><lifecycle-phases><value>Requirements</value><value>Software Architecture</value><value>Validation</value><value>Implementation</value><value>Software Development process</value><value>Requirements</value><value>Software Architecture</value><value>Validation</value><value>Implementation</value><value>Software Development process</value></lifecycle-phases><modelinglanguages-notations><value>activity diagram</value><value>collaborations</value><value>activity diagram</value><value>collaborations</value></modelinglanguages-notations><keyword><value>Service choreography</value><value>component design</value><value>model-driven development</value><value>Service choreography</value><value>component design</value><value>model-driven development</value></keyword><git-url>None</git-url></item>
<item><title>bCMS Case Study: AoURN</title><authors>Gunter Mussbacher</authors><organization>SCE, Carleton University</organization><req-tools>n/a</req-tools><languages>Aspect-oriented User Requirements Notation (AoURN)</languages><description><value>This artifact contains a model for the challenge problem bCMS described with the Aspect-oriented User Requirements Notation (AoURN). Its scenario view corresponds to section 4 of the bCMS case study document. Its goal view covers the Fire Station Coordinator stakeholder (section 3.1 in the bCMS case study document), the Fireman stakeholder (section 3.2), and the Integriy non-functional requirement (section 5.1). A very high-level scenario model for Integrity is also included to give a more complete picture on how non-functional requirements are modeled with AoURN.</value><value>This artifact contains a model for the challenge problem bCMS described with the Aspect-oriented User Requirements Notation (AoURN). Its scenario view corresponds to section 4 of the bCMS case study document. Its goal view covers the Fire Station Coordinator stakeholder (section 3.1 in the bCMS case study document), the Fireman stakeholder (section 3.2), and the Integriy non-functional requirement (section 5.1). A very high-level scenario model for Integrity is also included to give a more complete picture on how non-functional requirements are modeled with AoURN.</value></description><artifacts-link></artifacts-link><artifacts-types><value>Model</value><value>Model</value></artifacts-types><artifacts-dev-context><value>Academia</value><value>Challenge Problem/Competition</value><value>Workshop/Focus Group</value><value>Academia</value><value>Challenge Problem/Competition</value><value>Workshop/Focus Group</value></artifacts-dev-context><software-domains><value>Reactive System</value><value>Reactive System</value></software-domains><lifecycle-phases><value>Requirements</value><value>Requirements</value></lifecycle-phases><modelinglanguages-notations><value>User Requirements Notation</value><value>User Requirements Notation</value></modelinglanguages-notations><keyword><value>User Requirements Notation</value><value>Aspects</value><value>bCMS</value><value>CMA 2011 Workshop</value><value>User Requirements Notation</value><value>Aspects</value><value>bCMS</value><value>CMA 2011 Workshop</value></keyword><git-url>None</git-url></item>
<item><title>bCMS-SPL case study: A proposition based on the Cloud Component Approach.</title><authors>Jean-Baptiste Lezoray, An Phung-Khac, Antoine Beugnard</authors><organization>TELECOM Bretagne</organization><req-tools>None</req-tools><languages>EMF / Ecore</languages><description><value>This Artifact is the PDF description of a model for the Comparing Modeling Approaches workshop. It presents the cloud component model and a Model for Variability of Refinement Processes used to model the bCMS-SPL use case. Our targets are high-level and architectural design, and evolution. Runtime support will be tackled, but is not in the main focus of this contribution. We introduce:</value><value>
- A single system: on the basis of a custom component model, the cloud component model. The latter is dedicated to the modeling of distributed applications.</value><value>
- The whole SPL: on the basis of an MDE refinement process model that has the property of being variable. Its specification is inspired by previous works on refinement and feature models dedicated to provide adaptation capabilities to component-based architectures.</value><value>This Artifact is the PDF description of a model for the Comparing Modeling Approaches workshop. It presents the cloud component model and a Model for Variability of Refinement Processes used to model the bCMS-SPL use case. Our targets are high-level and architectural design, and evolution. Runtime support will be tackled, but is not in the main focus of this contribution. We introduce:</value><value>
- A single system: on the basis of a custom component model, the cloud component model. The latter is dedicated to the modeling of distributed applications.</value><value>
- The whole SPL: on the basis of an MDE refinement process model that has the property of being variable. Its specification is inspired by previous works on refinement and feature models dedicated to provide adaptation capabilities to component-based architectures.</value></description><artifacts-link></artifacts-link><artifacts-types><value>Methodology/Technique/Process</value><value>Methodology/Technique/Process</value></artifacts-types><artifacts-dev-context><value>Workshop/Focus Group</value><value>Workshop/Focus Group</value></artifacts-dev-context><software-domains><value>Model transformation</value><value>adaptive systems</value><value>System Software</value><value>Model transformation</value><value>adaptive systems</value><value>System Software</value></software-domains><lifecycle-phases><value>Requirements</value><value>Implementation/Deployment</value><value>Software Architecture</value><value>software development phases</value><value>Implementation</value><value>Software Development process</value><value>Requirements</value><value>Implementation/Deployment</value><value>Software Architecture</value><value>software development phases</value><value>Implementation</value><value>Software Development process</value></lifecycle-phases><modelinglanguages-notations><value>Ecore</value><value>Ecore</value></modelinglanguages-notations><keyword><value>Cloud components</value><value>Cloud components</value></keyword><git-url>None</git-url></item>
<item><title>bCMS case study models for OO-SPL approach</title><authors>Paul Istoan</authors><organization>University of Luxembourg</organization><req-tools>MagicDraw v.16</req-tools><languages>UML</languages><description><value>UML models for the OO-SPL modeling of the bCMS case study</value><value>UML models for the OO-SPL modeling of the bCMS case study</value></description><artifacts-link></artifacts-link><artifacts-types><value>Model</value><value>Model</value></artifacts-types><artifacts-dev-context><value>Workshop/Focus Group</value><value>Workshop/Focus Group</value></artifacts-dev-context><software-domains><value>Software Product Line</value><value>Software Product Line</value></software-domains><lifecycle-phases><value>Domain Analysis</value><value>Domain Analysis</value></lifecycle-phases><modelinglanguages-notations><value>class diagram</value><value>sequence diagram</value><value>statemachine diagram</value><value>class diagram</value><value>sequence diagram</value><value>statemachine diagram</value></modelinglanguages-notations><keyword><value>Object oriented model</value><value>Software product line</value><value>Object oriented model</value><value>Software product line</value></keyword><git-url>None</git-url></item>
<item><title>Activity Theory Models for the bCMS Case Study - CMA@MODELS2011</title><authors>Geri Georg, Lucy Troup</authors><organization>Colorado State University</organization><req-tools>None</req-tools><languages>None</languages><description><value>Activity Theory (AT) is a framework used in the psychological field to describe human activity. We have applied the framework to the bCMS case study system, and combined it with URN (User Requirements Notation) to provide formal semantics for AT concepts. We use AT in combination with URN to specify the requirements of the main scenario of the bCMS system, and then extend the URN specification using AOM techniques to cover possible variations described in the alternate and exception scenarios. We developed heuristics to transform models from AT to URN, and we can also use these heuristics to generate the corresponding AT models for on‐going stakeholder dialog when changes are proposed as part of system evolution. Combining AT with URN and MDD allows us to benefit from the expertise acquired in the sociology/psychology domains; to smooth the transition from informal and social context to a formal, system‐oriented description of the requirements; and to communicate with different categories of stakeholders and address their concerns.</value><value>Activity Theory (AT) is a framework used in the psychological field to describe human activity. We have applied the framework to the bCMS case study system, and combined it with URN (User Requirements Notation) to provide formal semantics for AT concepts. We use AT in combination with URN to specify the requirements of the main scenario of the bCMS system, and then extend the URN specification using AOM techniques to cover possible variations described in the alternate and exception scenarios. We developed heuristics to transform models from AT to URN, and we can also use these heuristics to generate the corresponding AT models for on‐going stakeholder dialog when changes are proposed as part of system evolution. Combining AT with URN and MDD allows us to benefit from the expertise acquired in the sociology/psychology domains; to smooth the transition from informal and social context to a formal, system‐oriented description of the requirements; and to communicate with different categories of stakeholders and address their concerns.</value></description><artifacts-link></artifacts-link><artifacts-types><value>Model</value><value>Model</value></artifacts-types><artifacts-dev-context><value>Academia</value><value>Research Project</value><value>Academia</value><value>Research Project</value></artifacts-dev-context><software-domains><value>System Software</value><value>System Software</value></software-domains><lifecycle-phases><value>Requirements</value><value>software development phases</value><value>Requirements</value><value>software development phases</value></lifecycle-phases><modelinglanguages-notations></modelinglanguages-notations><keyword><value>Activity Theory</value><value>Early Requirements</value><value>High-Level Design</value><value>URN</value><value>AOM</value><value>Activity Theory</value><value>Early Requirements</value><value>High-Level Design</value><value>URN</value><value>AOM</value></keyword><git-url>None</git-url></item>
<item><title>Reusable Aspect Models for the bCMS Case Study</title><authors>Jörg Kienzle^1, Wisam Al Abed^1, Valentin Bonnet^1, Omar Alam^1, Jacques Klein^2, Jean-Marc Jézéquel</authors><organization>1 McGill University, 2 University of Luxembourg, 3 IRISA</organization><req-tools>None</req-tools><languages>Reusable Aspect Models, v3</languages><description><value>This submission contains 14 high and low-level design models of parts of a single bCMS system using the Reusable Aspect Models approach (RAM). The included aspects are:</value><value>This submission contains 14 high and low-level design models of parts of a single bCMS system using the Reusable Aspect Models approach (RAM). The included aspects are:</value></description><artifacts-link></artifacts-link><artifacts-types><value>Model</value><value>Model</value></artifacts-types><artifacts-dev-context><value>Academia</value><value>Workshop/Focus Group</value><value>Academia</value><value>Workshop/Focus Group</value></artifacts-dev-context><software-domains></software-domains><lifecycle-phases><value>Design</value><value>Design</value></lifecycle-phases><modelinglanguages-notations><value>Reusable Aspect Models (RAM)</value><value>Reusable Aspect Models (RAM)</value></modelinglanguages-notations><keyword><value>Reusable Aspect Models</value><value>Reusable Aspect Models</value></keyword><git-url>None</git-url></item>
<item><title>Activity Theory Comparison Criteria - Dec 2011 version of criteria</title><authors>Geri Georg, Lucy Troup</authors><organization>Colorado State University</organization><req-tools>None</req-tools><languages>None</languages><description><value>This document specifies the comparison criteria developed from the CMA workshop as applied to Activity Theory.</value><value>This document specifies the comparison criteria developed from the CMA workshop as applied to Activity Theory.</value></description><artifacts-link></artifacts-link><artifacts-types><value>Methodology/Technique/Process</value><value>Methodology/Technique/Process</value></artifacts-types><artifacts-dev-context><value>Academia</value><value>Workshop/Focus Group</value><value>Academia</value><value>Workshop/Focus Group</value></artifacts-dev-context><software-domains><value>System Software</value><value>System Software</value></software-domains><lifecycle-phases><value>Requirements</value><value>Requirements</value></lifecycle-phases><modelinglanguages-notations></modelinglanguages-notations><keyword><value>CMA 2011 Workshop</value><value>Activity Theory</value><value>Comparison Criteria</value><value>CMA 2011 Workshop</value><value>Activity Theory</value><value>Comparison Criteria</value></keyword><git-url>None</git-url></item>
<item><title>Artifact to paper 'Partial Evaluation of OCL Expressions', to appear in Proceedings of MODELS'17</title><authors>Bastian Ulke^1, Friedrich Steimann^1 and Ralf Lämmel^2</authors><organization>1 FernUniversitat in Hagen; 2 Universitat Koblenz-Landau</organization><req-tools>see README files.</req-tools><languages>Ecore, Java, OCL</languages><description><value> (taken from the paper) -- In the academic literature, many uses of the Object Constraint Language (OCL) have been proposed. By contrast, the utilization of OCL in contemporary modelling tools lags behind, suggesting that leverage of OCL remains limited in practice. We consider this undeserved, and present a scheme for partially evaluating OCL expressions that allows one to capitalize on given OCL specifications for a wide array of purposes using a single implementation: a partial evaluator of OCL.</value><value>In this context, our artifact delivers the following contributions:</value><value>The artifact consists consists of three parts:</value><value>All three parts contain own README files with further details on their usage.</value><value>
In case you use parts of this artifact for your own research, please cite our publication in your work.</value><value> (taken from the paper) -- In the academic literature, many uses of the Object Constraint Language (OCL) have been proposed. By contrast, the utilization of OCL in contemporary modelling tools lags behind, suggesting that leverage of OCL remains limited in practice. We consider this undeserved, and present a scheme for partially evaluating OCL expressions that allows one to capitalize on given OCL specifications for a wide array of purposes using a single implementation: a partial evaluator of OCL.</value><value>In this context, our artifact delivers the following contributions:</value><value>The artifact consists consists of three parts:</value><value>All three parts contain own README files with further details on their usage.</value><value>
In case you use parts of this artifact for your own research, please cite our publication in your work.</value></description><artifacts-link><value>https://figshare.com/s/0d0ec7567d12ac45c253</value><value>https://figshare.com/s/0d0ec7567d12ac45c253</value></artifacts-link><artifacts-types><value>Metamodel</value><value>Model</value><value>Tool</value><value>Metamodel</value><value>Model</value><value>Tool</value></artifacts-types><artifacts-dev-context><value>Academia</value><value>Research Project</value><value>Academia</value><value>Research Project</value></artifacts-dev-context><software-domains></software-domains><lifecycle-phases></lifecycle-phases><modelinglanguages-notations><value>Ecore</value><value>Ecore</value></modelinglanguages-notations><keyword></keyword><git-url>None</git-url></item>
<item><title>Collaborative modeling environment features</title><authors>Constantin Masson, Jonathan Corley, Eugene Syriani</authors><organization>Université de Montréal, University of West Georgia</organization><req-tools>Image viewer</req-tools><languages>Feature Modeling</languages><description><value>There has been a growing trend toward collaborative environments especially those utilizing browser-based interfaces which can be seen in modeling tools such as AToMPM and WebGME. In response to the growing interest in collaborative modeling, we explored existing systems and potential solutions to identify the various features relevant to collaborative modeling systems. In this paper, we detail the feature diagram resulting from our exploration of collaborative modeling systems. We also detail the features of an existing collaborative system both to illustrate the use of the diagram and further explore the features. Through this feature diagram we identify key areas for collaborative modeling systems. We hope the feature diagram will be used to guide development, analysis, and discussion around collaborative modeling systems.</value><value>There has been a growing trend toward collaborative environments especially those utilizing browser-based interfaces which can be seen in modeling tools such as AToMPM and WebGME. In response to the growing interest in collaborative modeling, we explored existing systems and potential solutions to identify the various features relevant to collaborative modeling systems. In this paper, we detail the feature diagram resulting from our exploration of collaborative modeling systems. We also detail the features of an existing collaborative system both to illustrate the use of the diagram and further explore the features. Through this feature diagram we identify key areas for collaborative modeling systems. We hope the feature diagram will be used to guide development, analysis, and discussion around collaborative modeling systems.</value></description><artifacts-link></artifacts-link><artifacts-types><value>Model</value><value>Model</value></artifacts-types><artifacts-dev-context><value>Academia</value><value>Research Project</value><value>Academia</value><value>Research Project</value></artifacts-dev-context><software-domains></software-domains><lifecycle-phases><value>Domain Analysis</value><value>Domain Analysis</value></lifecycle-phases><modelinglanguages-notations><value>Feature Model</value><value>Feature Model</value></modelinglanguages-notations><keyword><value>collaboration</value><value>model-driven development</value><value>environment</value><value>multi-user</value><value>concurrency</value><value>cloud</value><value>collaboration</value><value>model-driven development</value><value>environment</value><value>multi-user</value><value>concurrency</value><value>cloud</value></keyword><git-url>None</git-url></item>
<item><title>Case Studies for Validation of a UML/OCL Approach for Service-Oriented Applications</title><authors>Loli Burgueno, Martin Gogolla, Antonio Vallecillo</authors><organization>University of Malaga, University of Bremen, University of Malaga</organization><req-tools>USE (UML-based Specification Environment) https://sourceforge.net/projects/useocl/; 
YEd (yet another graph Editor) https://www.yworks.com/products/yed</req-tools><languages>UML
OCL
SOIL</languages><description><value>The case studies have been developed in order to explain and validate an approach for service-oriented applications. Research papers explaining the approach are available from the authors.</value><value>The case studies have been developed in order to explain and validate an approach for service-oriented applications. Research papers explaining the approach are available from the authors.</value></description><artifacts-link></artifacts-link><artifacts-types><value>Case study</value><value>Methodology/Technique/Process</value><value>Model</value><value>Case study</value><value>Methodology/Technique/Process</value><value>Model</value></artifacts-types><artifacts-dev-context><value>Academia</value><value>Challenge Problem/Competition</value><value>Research Project</value><value>Academia</value><value>Challenge Problem/Competition</value><value>Research Project</value></artifacts-dev-context><software-domains><value>Business/Information Systems</value><value>SOA systems</value><value>Business/Information Systems</value><value>SOA systems</value></software-domains><lifecycle-phases><value>Design</value><value>Validation/Verification/Analysis</value><value>Design</value><value>Validation/Verification/Analysis</value></lifecycle-phases><modelinglanguages-notations><value>UML</value><value>UML</value></modelinglanguages-notations><keyword><value>UML</value><value>OCL</value><value>Service-Oriented Architecture</value><value>Service-Oriented Application</value><value>model execution</value><value>Validation</value><value>verification</value><value>UML</value><value>OCL</value><value>Service-Oriented Architecture</value><value>Service-Oriented Application</value><value>model execution</value><value>Validation</value><value>verification</value></keyword><git-url>None</git-url></item>
<item><title>thingml-diversifier</title><authors>Brice Morin, Jakob Høgenes</authors><organization>SINTEF Digital</organization><req-tools>None</req-tools><languages>ThingML
Java</languages><description></description><artifacts-link><value>https://github.com/modelsconf2018/artifact-evaluation/tree/master/morin</value><value>https://github.com/modelsconf2018/artifact-evaluation/tree/master/morin</value></artifacts-link><artifacts-types><value>Tool</value><value>Tool</value></artifacts-types><artifacts-dev-context><value>Academia</value><value>Academia</value></artifacts-dev-context><software-domains></software-domains><lifecycle-phases></lifecycle-phases><modelinglanguages-notations></modelinglanguages-notations><keyword><value>Diversity</value><value>Diversity</value></keyword><git-url>http://remodd.org/git/thingml-diversifier/git.cgi/thingml-diversifier.git</git-url></item>
<item><title>Towards Sound, Optimal and Flexible Building from Megamodels</title><authors>Perdita Stevens</authors><organization>University of Edinburgh</organization><req-tools>pluto, maven, java, junit - see pom.xml</req-tools><languages>Java</languages><description><value>This project contains an early-stage demonstration of building on top of the pluto build system to enable sound, flexible and optimal building from megamodels. It demonstrates the examples from the paper</value><value>Towards Sound, Optimal and Flexible Building from Megamodels by me, Perdita Stevens, in MODELS'18,</value><value>See the paper, and the READMEs and comments in the various directories, for more information.</value><value>This project contains an early-stage demonstration of building on top of the pluto build system to enable sound, flexible and optimal building from megamodels. It demonstrates the examples from the paper</value><value>Towards Sound, Optimal and Flexible Building from Megamodels by me, Perdita Stevens, in MODELS'18,</value><value>See the paper, and the READMEs and comments in the various directories, for more information.</value></description><artifacts-link></artifacts-link><artifacts-types><value>Methodology/Technique/Process</value><value>Methodology/Technique/Process</value></artifacts-types><artifacts-dev-context><value>Academia</value><value>Academia</value></artifacts-dev-context><software-domains></software-domains><lifecycle-phases></lifecycle-phases><modelinglanguages-notations></modelinglanguages-notations><keyword><value>megamodel</value><value>build system</value><value>Model transformation</value><value>bidirectionality</value><value>orientation model</value><value>megamodel</value><value>build system</value><value>Model transformation</value><value>bidirectionality</value><value>orientation model</value></keyword><git-url>http://remodd.org/git/megamodelbuild/git.cgi/megamodelbuild.git</git-url></item>
<item><title>Expressing Confidence in Model and Model Transformation Elements</title><authors>Loli Burgueño</authors><organization>Universidad de Málaga</organization><req-tools>Eclipse IDE (tested with Oxigen.2)
Java 8</req-tools><languages>Java</languages><description><value>This artifact contains the source code of the LinTra transformation engine as well as several case studies that incorporate models and models transformations taking into account the confidence of their elements.</value><value>This artifact contains the source code of the LinTra transformation engine as well as several case studies that incorporate models and models transformations taking into account the confidence of their elements.</value></description><artifacts-link><value>https://github.com/atenearesearchgroup/lintra.git</value><value>https://github.com/atenearesearchgroup/lintra.git</value></artifacts-link><artifacts-types><value>Case study</value><value>Model transformation</value><value>Tool</value><value>Case study</value><value>Model transformation</value><value>Tool</value></artifacts-types><artifacts-dev-context><value>Academia</value><value>Research Project</value><value>Academia</value><value>Research Project</value></artifacts-dev-context><software-domains><value>Model transformation</value><value>Model transformation</value></software-domains><lifecycle-phases><value>Implementation</value><value>Implementation</value></lifecycle-phases><modelinglanguages-notations></modelinglanguages-notations><keyword></keyword><git-url>http://remodd.org/git/ConfidenceInMDE/git.cgi/ConfidenceInMDE.git</git-url></item>
<item><title>Extending CEP to Graph-structured information</title><authors>Gala Barquero, Loli Burgueño, Javier Troya, Antonio Vallecillo</authors><organization>Universidad de Málaga</organization><req-tools>Eclipse
Maven
Spring</req-tools><languages>Scala
Java</languages><description></description><artifacts-link><value>https://github.com/atenearesearchgroup/graphCEP.git</value><value>https://github.com/atenearesearchgroup/graphCEP.git</value></artifacts-link><artifacts-types><value>Case study</value><value>Model transformation</value><value>Case study</value><value>Model transformation</value></artifacts-types><artifacts-dev-context><value>Academia</value><value>Research Project</value><value>Academia</value><value>Research Project</value></artifacts-dev-context><software-domains><value>Real-time embedded systems</value><value>Real-time embedded systems</value></software-domains><lifecycle-phases><value>Software Architecture</value><value>Implementation</value><value>Software Architecture</value><value>Implementation</value></lifecycle-phases><modelinglanguages-notations></modelinglanguages-notations><keyword><value>Complex Event Processing</value><value>Graph-databases</value><value>Data Streams</value><value>Complex Event Processing</value><value>Graph-databases</value><value>Data Streams</value></keyword><git-url>http://remodd.org/git/Graph-CEP/git.cgi/Graph-CEP.git</git-url></item>
<item><title>Towards Scalable Views on Heterogeneous Model Resources</title><authors>Hugo Bruneliere^1, Florent Marchand de Kerchove^1, Gwendal Daniel^2, Jordi Cabot^3 </authors><organization>1 IMT Atlantique - LS2N (CNRS) &amp; ARMINES, 2 IN3 - UOC, 3 ICREA &amp; UOC</organization><req-tools>Eclipse Modeling Tools (4.7), CDO (4.6), Xtext (2.13), Epsilon (1.4.0), ATL (3.8)</req-tools><languages>Java, EMF, ATL, Xtext</languages><description><value>This artifact regroups all the tools used or created for the MODELS 2018 paper </value><value>.  </value><value>Our contribution is the ability to create views combining very large models from heterogeneous resources (e.g., in-memory or from NeoEMF- or CDO-managed databases). These views can be navigated and queried like regular models.</value><value>This artifact regroups all the tools used or created for the MODELS 2018 paper </value><value>.  </value><value>Our contribution is the ability to create views combining very large models from heterogeneous resources (e.g., in-memory or from NeoEMF- or CDO-managed databases). These views can be navigated and queried like regular models.</value></description><artifacts-link><value>http://www.atlanmod.org/emfviews/</value><value>http://www.neoemf.com/</value><value>https://github.com/atlanmod/scalable-views-heterogeneous-models</value><value>http://www.atlanmod.org/emfviews/</value><value>http://www.neoemf.com/</value><value>https://github.com/atlanmod/scalable-views-heterogeneous-models</value></artifacts-link><artifacts-types><value>Assessment</value><value>Tool</value><value>Assessment</value><value>Tool</value></artifacts-types><artifacts-dev-context><value>Academia</value><value>Research Project</value><value>Academia</value><value>Research Project</value></artifacts-dev-context><software-domains><value>Business/Information Systems</value><value>Cyberphysical Systems</value><value>Business/Information Systems</value><value>Cyberphysical Systems</value></software-domains><lifecycle-phases><value>Design</value><value>Evolution/Maintenance</value><value>Systems Engineering/Business Process Engineering</value><value>Design</value><value>Evolution/Maintenance</value><value>Systems Engineering/Business Process Engineering</value></lifecycle-phases><modelinglanguages-notations><value>BPMN</value><value>Ecore</value><value>component diagram</value><value>BPMN</value><value>Ecore</value><value>component diagram</value></modelinglanguages-notations><keyword><value>Modeling</value><value>Views</value><value>Scalability</value><value>Persistence</value><value>Database</value><value>Design Time</value><value>Runtime</value><value>Modeling</value><value>Views</value><value>Scalability</value><value>Persistence</value><value>Database</value><value>Design Time</value><value>Runtime</value></keyword><git-url>http://remodd.org/git/scalable-views/git.cgi/scalable-views.git</git-url></item>
<item><title>Expressive and Efficient Model Transformation with an Internal DSL of Xtend (Software Artifacts)</title><authors>Artur Boronat</authors><organization>University of Leicester</organization><req-tools>Eclipse, Gradle Builldship, CPS benchmark domain models, Xtext SDK </req-tools><languages>Xtend, Java</languages><description><value>Software artifacts related to the publication</value><value>Artur Boronat. Expressive and Efficient Model Transformation with an Internal DSL of Xtend. MoDELS'18.</value><value>This is a snapshot of the GitHub repositories:</value><value>
and</value><value>Software artifacts related to the publication</value><value>Artur Boronat. Expressive and Efficient Model Transformation with an Internal DSL of Xtend. MoDELS'18.</value><value>This is a snapshot of the GitHub repositories:</value><value>
and</value></description><artifacts-link></artifacts-link><artifacts-types><value>Assessment</value><value>Model transformation</value><value>Assessment</value><value>Model transformation</value></artifacts-types><artifacts-dev-context><value>Research Project</value><value>Research Project</value></artifacts-dev-context><software-domains><value>Cyberphysical Systems</value><value>Model transformation</value><value>Cyberphysical Systems</value><value>Model transformation</value></software-domains><lifecycle-phases><value>Implementation</value><value>Validation/Verification/Analysis</value><value>Implementation</value><value>Validation/Verification/Analysis</value></lifecycle-phases><modelinglanguages-notations><value>Ecore</value><value>Ecore</value></modelinglanguages-notations><keyword><value>YAMTL</value><value>VIATRA CPS Benchmark</value><value>YAMTL</value><value>VIATRA CPS Benchmark</value></keyword><git-url>http://remodd.org/git/Boronat_MoDELS18/git.cgi/Boronat_MoDELS18.git</git-url></item>
</items>